{"ast":null,"code":"var _DatabricksService;\nclass DatabricksService {\n  constructor() {\n    this.config = void 0;\n    this.baseUrl = void 0;\n    this.config = {\n      token: process.env.REACT_APP_DATABRICKS_TOKEN || '',\n      workspace: process.env.REACT_APP_DATABRICKS_WORKSPACE || '',\n      agentEndpoint: process.env.REACT_APP_DATABRICKS_AGENT_ENDPOINT || ''\n    };\n    this.baseUrl = `https://${this.config.workspace}/serving-endpoints/${this.config.agentEndpoint}/invocations`;\n  }\n  static getInstance() {\n    if (!DatabricksService.instance) {\n      DatabricksService.instance = new DatabricksService();\n    }\n    return DatabricksService.instance;\n  }\n\n  /**\n   * Test connection to Databricks endpoint\n   */\n  async testConnection() {\n    try {\n      console.log('Testing connection to:', this.baseUrl);\n      console.log('With token:', this.config.token ? 'Present (length: ' + this.config.token.length + ')' : 'Missing');\n      const response = await this.makeRequest({\n        messages: [{\n          role: 'user',\n          content: 'Hello, are you working?'\n        }]\n      });\n      console.log('Connection test response:', response);\n\n      // Check for Databricks response format (messages array) or OpenAI format (choices array)\n      const hasValidResponse = response.messages && response.messages.length > 0 || response.choices && response.choices.length > 0;\n      console.log('Connection test result:', hasValidResponse ? 'SUCCESS' : 'FAILED');\n      return hasValidResponse;\n    } catch (error) {\n      console.error('Databricks connection test failed:', error);\n      console.error('URL attempted:', this.baseUrl);\n      return false;\n    }\n  }\n\n  /**\n   * Analyze symptoms and get healthcare recommendations\n   */\n  async analyzeSymptoms(request) {\n    try {\n      const prompt = this.buildSymptomAnalysisPrompt(request);\n      const response = await this.makeRequest({\n        messages: [{\n          role: 'system',\n          content: 'You are a healthcare AI assistant that analyzes symptoms and provides healthcare recommendations. Always prioritize patient safety and recommend seeking emergency care when appropriate. Provide structured JSON responses.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 1000,\n        temperature: 0.3\n      });\n      return this.parseHealthcareResponse(response);\n    } catch (error) {\n      console.error('Symptom analysis failed:', error);\n      throw new Error(`Failed to analyze symptoms: ${error}`);\n    }\n  }\n\n  /**\n   * Get healthcare provider recommendations based on condition/specialty\n   */\n  async getProviderRecommendations(condition, location, urgency = 'routine') {\n    try {\n      const prompt = `\nBased on the medical condition \"${condition}\" and urgency level \"${urgency}\", recommend:\n1. Most appropriate healthcare provider types\n2. Search keywords for finding providers\n3. Any specific considerations\n\nLocation: ${location.city}, ${location.state}\n\nRespond in JSON format:\n{\n  \"recommended_types\": [\"hospital\", \"urgent_care\", \"clinic\", \"specialist\"],\n  \"search_keywords\": [\"cardiology\", \"emergency\", \"urgent care\"],\n  \"urgency_level\": \"urgent\",\n  \"additional_info\": \"Patient should seek immediate care...\"\n}\n`;\n      const response = await this.makeRequest({\n        messages: [{\n          role: 'system',\n          content: 'You are a healthcare navigation AI that helps patients find appropriate care providers based on their condition and location.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 500,\n        temperature: 0.2\n      });\n      return this.parseProviderRecommendations(response);\n    } catch (error) {\n      console.error('Provider recommendations failed:', error);\n      throw new Error(`Failed to get provider recommendations: ${error}`);\n    }\n  }\n\n  /**\n   * Get travel health recommendations\n   */\n  async getTravelHealthAdvice(destination, healthConditions, travelDuration) {\n    try {\n      const prompt = `\nProvide travel health advice for:\n- Destination: ${destination}\n- Health conditions: ${healthConditions.join(', ')}\n- Travel duration: ${travelDuration}\n\nInclude vaccinations, medications, healthcare facilities to research, and travel tips.\n\nRespond in JSON format with arrays for each category.\n`;\n      const response = await this.makeRequest({\n        messages: [{\n          role: 'system',\n          content: 'You are a travel medicine specialist AI providing health advice for international travelers.'\n        }, {\n          role: 'user',\n          content: prompt\n        }],\n        max_tokens: 800,\n        temperature: 0.3\n      });\n      return this.parseTravelHealthResponse(response);\n    } catch (error) {\n      console.error('Travel health advice failed:', error);\n      throw new Error(`Failed to get travel health advice: ${error}`);\n    }\n  }\n\n  /**\n   * Make authenticated request to Databricks endpoint\n   */\n  async makeRequest(payload) {\n    if (!this.config.token || !this.config.workspace) {\n      throw new Error('Databricks configuration is incomplete. Check environment variables.');\n    }\n    console.log('Making request to URL:', this.baseUrl);\n    console.log('Request payload:', JSON.stringify(payload, null, 2));\n    console.log('Token length:', this.config.token.length);\n    console.log('Token starts with:', this.config.token.substring(0, 10) + '...');\n    console.log('Authorization header:', `Bearer ${this.config.token.substring(0, 10)}...`);\n    const headers = {\n      'Authorization': `Bearer ${this.config.token}`,\n      'Content-Type': 'application/json'\n    };\n    console.log('Request headers:', headers);\n    const response = await fetch(this.baseUrl, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload)\n    });\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Error response body:', errorText);\n      throw new Error(`Databricks API error (${response.status}): ${errorText}`);\n    }\n    const jsonResponse = await response.json();\n    console.log('Success response:', jsonResponse);\n    return jsonResponse;\n  }\n\n  /**\n   * Build detailed prompt for symptom analysis\n   */\n  buildSymptomAnalysisPrompt(request) {\n    var _userProfile$medicalH, _userProfile$chronicC, _userProfile$medicati, _userProfile$allergie;\n    const {\n      symptoms,\n      severity,\n      duration,\n      description,\n      location,\n      userProfile\n    } = request;\n    return `\nAnalyze these symptoms and provide healthcare recommendations:\n\nSYMPTOMS: ${symptoms.join(', ')}\nSEVERITY: ${severity}\nDURATION: ${duration}\nDESCRIPTION: ${description}\n\nPATIENT CONTEXT:\n- Location: ${location.city || 'Unknown'}, ${location.state || 'Unknown'}\n- Age: ${(userProfile === null || userProfile === void 0 ? void 0 : userProfile.age) || 'Not specified'}\n- Gender: ${(userProfile === null || userProfile === void 0 ? void 0 : userProfile.gender) || 'Not specified'}\n- Medical History: ${(userProfile === null || userProfile === void 0 ? void 0 : (_userProfile$medicalH = userProfile.medicalHistory) === null || _userProfile$medicalH === void 0 ? void 0 : _userProfile$medicalH.join(', ')) || 'None provided'}\n- Chronic Conditions: ${(userProfile === null || userProfile === void 0 ? void 0 : (_userProfile$chronicC = userProfile.chronicConditions) === null || _userProfile$chronicC === void 0 ? void 0 : _userProfile$chronicC.join(', ')) || 'None provided'}\n- Current Medications: ${(userProfile === null || userProfile === void 0 ? void 0 : (_userProfile$medicati = userProfile.medications) === null || _userProfile$medicati === void 0 ? void 0 : _userProfile$medicati.join(', ')) || 'None provided'}\n- Allergies: ${(userProfile === null || userProfile === void 0 ? void 0 : (_userProfile$allergie = userProfile.allergies) === null || _userProfile$allergie === void 0 ? void 0 : _userProfile$allergie.join(', ')) || 'None provided'}\n\nPlease provide a detailed analysis in the following JSON format:\n{\n  \"recommendedCareType\": \"emergency|hospital|urgent_care|clinic|pharmacy|telehealth|home_care\",\n  \"urgency\": \"emergency|urgent|moderate|routine\",\n  \"confidence\": 0.85,\n  \"reasoning\": \"Detailed explanation of the recommendation\",\n  \"recommendations\": [\"Specific action items for the patient\"],\n  \"symptoms_analysis\": {\n    \"primary_symptoms\": [\"key symptoms\"],\n    \"severity_assessment\": \"assessment details\",\n    \"potential_conditions\": [\"possible conditions\"],\n    \"red_flags\": [\"warning signs if any\"]\n  },\n  \"next_steps\": [\"immediate actions to take\"],\n  \"when_to_seek_emergency_care\": [\"specific emergency warning signs\"],\n  \"estimated_wait_time\": \"15-30 minutes\",\n  \"cost_considerations\": \"Information about expected costs\"\n}\n\nIMPORTANT: Always err on the side of caution. If there are any concerning symptoms, recommend higher-level care.\n`;\n  }\n\n  /**\n   * Parse healthcare response from Databricks\n   */\n  parseHealthcareResponse(response) {\n    try {\n      // Extract content from Databricks response format\n      let content = '';\n      if (response.messages && response.messages[0] && response.messages[0].content) {\n        // Databricks format: messages array\n        content = response.messages[0].content;\n      } else if (response.choices && response.choices[0] && response.choices[0].message) {\n        // OpenAI format: choices array\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        // Direct response\n        content = response.response;\n      } else {\n        throw new Error('Unexpected response format from Databricks');\n      }\n\n      // Try to parse JSON from the content\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0]);\n\n        // Validate required fields and provide defaults\n        return {\n          recommendedCareType: parsed.recommendedCareType || 'clinic',\n          urgency: parsed.urgency || 'moderate',\n          confidence: parsed.confidence || 0.7,\n          reasoning: parsed.reasoning || 'Analysis completed',\n          recommendations: parsed.recommendations || ['Consult with a healthcare provider'],\n          symptoms_analysis: parsed.symptoms_analysis || {\n            primary_symptoms: [],\n            severity_assessment: 'Requires evaluation',\n            potential_conditions: [],\n            red_flags: []\n          },\n          next_steps: parsed.next_steps || ['Schedule an appointment'],\n          when_to_seek_emergency_care: parsed.when_to_seek_emergency_care || ['Severe symptoms develop'],\n          estimated_wait_time: parsed.estimated_wait_time,\n          cost_considerations: parsed.cost_considerations\n        };\n      } else {\n        // Fallback for non-JSON responses\n        return this.createFallbackRecommendation(content);\n      }\n    } catch (error) {\n      console.error('Failed to parse healthcare response:', error);\n      throw new Error('Invalid response format from healthcare AI');\n    }\n  }\n\n  /**\n   * Parse provider recommendations response\n   */\n  parseProviderRecommendations(response) {\n    try {\n      let content = '';\n      if (response.messages && response.messages[0] && response.messages[0].content) {\n        content = response.messages[0].content;\n      } else if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      }\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback\n      return {\n        recommended_types: ['clinic'],\n        search_keywords: ['healthcare'],\n        urgency_level: 'routine',\n        additional_info: 'Consult with a healthcare provider'\n      };\n    } catch (error) {\n      console.error('Failed to parse provider recommendations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse travel health response\n   */\n  parseTravelHealthResponse(response) {\n    try {\n      let content = '';\n      if (response.messages && response.messages[0] && response.messages[0].content) {\n        content = response.messages[0].content;\n      } else if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      }\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback\n      return {\n        vaccinations: [],\n        medications: [],\n        healthcare_facilities: [],\n        travel_tips: ['Consult with a travel medicine specialist'],\n        emergency_contacts: []\n      };\n    } catch (error) {\n      console.error('Failed to parse travel health response:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create fallback recommendation for non-JSON responses\n   */\n  createFallbackRecommendation(content) {\n    // Analyze content for urgency keywords\n    const urgentKeywords = ['emergency', 'urgent', 'immediate', 'serious', 'severe'];\n    const isUrgent = urgentKeywords.some(keyword => content.toLowerCase().includes(keyword));\n    return {\n      recommendedCareType: isUrgent ? 'urgent_care' : 'clinic',\n      urgency: isUrgent ? 'urgent' : 'moderate',\n      confidence: 0.6,\n      reasoning: 'AI analysis completed. Recommendation based on symptom assessment.',\n      recommendations: [content || 'Consult with a healthcare provider for proper evaluation'],\n      symptoms_analysis: {\n        primary_symptoms: [],\n        severity_assessment: 'Requires professional evaluation',\n        potential_conditions: [],\n        red_flags: []\n      },\n      next_steps: ['Schedule an appointment with an appropriate healthcare provider'],\n      when_to_seek_emergency_care: ['If symptoms worsen significantly', 'If you experience severe pain or difficulty breathing'],\n      estimated_wait_time: isUrgent ? '30-60 minutes' : '1-2 hours',\n      cost_considerations: 'Varies by provider and insurance coverage'\n    };\n  }\n\n  /**\n   * Get service status and configuration\n   */\n  getStatus() {\n    return {\n      configured: !!(this.config.token && this.config.workspace && this.config.agentEndpoint),\n      workspace: this.config.workspace,\n      endpoint: this.config.agentEndpoint,\n      hasToken: !!this.config.token\n    };\n  }\n}\n_DatabricksService = DatabricksService;\nDatabricksService.instance = void 0;\nexport default DatabricksService.getInstance();","map":{"version":3,"names":["DatabricksService","constructor","config","baseUrl","token","process","env","REACT_APP_DATABRICKS_TOKEN","workspace","REACT_APP_DATABRICKS_WORKSPACE","agentEndpoint","REACT_APP_DATABRICKS_AGENT_ENDPOINT","getInstance","instance","testConnection","console","log","length","response","makeRequest","messages","role","content","hasValidResponse","choices","error","analyzeSymptoms","request","prompt","buildSymptomAnalysisPrompt","max_tokens","temperature","parseHealthcareResponse","Error","getProviderRecommendations","condition","location","urgency","city","state","parseProviderRecommendations","getTravelHealthAdvice","destination","healthConditions","travelDuration","join","parseTravelHealthResponse","payload","JSON","stringify","substring","headers","fetch","method","body","status","Object","fromEntries","entries","ok","errorText","text","jsonResponse","json","_userProfile$medicalH","_userProfile$chronicC","_userProfile$medicati","_userProfile$allergie","symptoms","severity","duration","description","userProfile","age","gender","medicalHistory","chronicConditions","medications","allergies","message","jsonMatch","match","parsed","parse","recommendedCareType","confidence","reasoning","recommendations","symptoms_analysis","primary_symptoms","severity_assessment","potential_conditions","red_flags","next_steps","when_to_seek_emergency_care","estimated_wait_time","cost_considerations","createFallbackRecommendation","recommended_types","search_keywords","urgency_level","additional_info","vaccinations","healthcare_facilities","travel_tips","emergency_contacts","urgentKeywords","isUrgent","some","keyword","toLowerCase","includes","getStatus","configured","endpoint","hasToken","_DatabricksService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/databricksService.ts"],"sourcesContent":["import { Location } from './locationService';\nimport { HealthcareProvider } from './placesService';\n\nexport interface SymptomRequest {\n  symptoms: string[];\n  severity: 'mild' | 'moderate' | 'severe' | 'emergency';\n  duration: string;\n  description: string;\n  location: Location;\n  userProfile?: {\n    age?: number;\n    gender?: string;\n    medicalHistory?: string[];\n    allergies?: string[];\n    medications?: string[];\n    chronicConditions?: string[];\n  };\n}\n\nexport interface HealthcareRecommendation {\n  recommendedCareType: 'emergency' | 'hospital' | 'urgent_care' | 'clinic' | 'pharmacy' | 'telehealth' | 'home_care';\n  urgency: 'emergency' | 'urgent' | 'moderate' | 'routine';\n  confidence: number; // 0-1 scale\n  reasoning: string;\n  recommendations: string[];\n  symptoms_analysis: {\n    primary_symptoms: string[];\n    severity_assessment: string;\n    potential_conditions: string[];\n    red_flags: string[];\n  };\n  next_steps: string[];\n  when_to_seek_emergency_care: string[];\n  estimated_wait_time?: string;\n  cost_considerations?: string;\n}\n\nexport interface DatabricksConfig {\n  token: string;\n  workspace: string;\n  agentEndpoint: string;\n}\n\nclass DatabricksService {\n  private static instance: DatabricksService;\n  private config: DatabricksConfig;\n  private baseUrl: string;\n\n  private constructor() {\n    this.config = {\n      token: process.env.REACT_APP_DATABRICKS_TOKEN || '',\n      workspace: process.env.REACT_APP_DATABRICKS_WORKSPACE || '',\n      agentEndpoint: process.env.REACT_APP_DATABRICKS_AGENT_ENDPOINT || ''\n    };\n    \n    this.baseUrl = `https://${this.config.workspace}/serving-endpoints/${this.config.agentEndpoint}/invocations`;\n  }\n\n  public static getInstance(): DatabricksService {\n    if (!DatabricksService.instance) {\n      DatabricksService.instance = new DatabricksService();\n    }\n    return DatabricksService.instance;\n  }\n\n  /**\n   * Test connection to Databricks endpoint\n   */\n  public async testConnection(): Promise<boolean> {\n    try {\n      console.log('Testing connection to:', this.baseUrl);\n      console.log('With token:', this.config.token ? 'Present (length: ' + this.config.token.length + ')' : 'Missing');\n      \n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'user',\n            content: 'Hello, are you working?'\n          }\n        ]\n      });\n      \n      console.log('Connection test response:', response);\n      \n      // Check for Databricks response format (messages array) or OpenAI format (choices array)\n      const hasValidResponse = (response.messages && response.messages.length > 0) || \n                               (response.choices && response.choices.length > 0);\n      \n      console.log('Connection test result:', hasValidResponse ? 'SUCCESS' : 'FAILED');\n      return hasValidResponse;\n    } catch (error) {\n      console.error('Databricks connection test failed:', error);\n      console.error('URL attempted:', this.baseUrl);\n      return false;\n    }\n  }\n\n  /**\n   * Analyze symptoms and get healthcare recommendations\n   */\n  public async analyzeSymptoms(request: SymptomRequest): Promise<HealthcareRecommendation> {\n    try {\n      const prompt = this.buildSymptomAnalysisPrompt(request);\n      \n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a healthcare AI assistant that analyzes symptoms and provides healthcare recommendations. Always prioritize patient safety and recommend seeking emergency care when appropriate. Provide structured JSON responses.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 1000,\n        temperature: 0.3\n      });\n\n      return this.parseHealthcareResponse(response);\n    } catch (error) {\n      console.error('Symptom analysis failed:', error);\n      throw new Error(`Failed to analyze symptoms: ${error}`);\n    }\n  }\n\n  /**\n   * Get healthcare provider recommendations based on condition/specialty\n   */\n  public async getProviderRecommendations(\n    condition: string,\n    location: Location,\n    urgency: 'emergency' | 'urgent' | 'routine' = 'routine'\n  ): Promise<{\n    recommended_types: string[];\n    search_keywords: string[];\n    urgency_level: string;\n    additional_info: string;\n  }> {\n    try {\n      const prompt = `\nBased on the medical condition \"${condition}\" and urgency level \"${urgency}\", recommend:\n1. Most appropriate healthcare provider types\n2. Search keywords for finding providers\n3. Any specific considerations\n\nLocation: ${location.city}, ${location.state}\n\nRespond in JSON format:\n{\n  \"recommended_types\": [\"hospital\", \"urgent_care\", \"clinic\", \"specialist\"],\n  \"search_keywords\": [\"cardiology\", \"emergency\", \"urgent care\"],\n  \"urgency_level\": \"urgent\",\n  \"additional_info\": \"Patient should seek immediate care...\"\n}\n`;\n\n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a healthcare navigation AI that helps patients find appropriate care providers based on their condition and location.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.2\n      });\n\n      return this.parseProviderRecommendations(response);\n    } catch (error) {\n      console.error('Provider recommendations failed:', error);\n      throw new Error(`Failed to get provider recommendations: ${error}`);\n    }\n  }\n\n  /**\n   * Get travel health recommendations\n   */\n  public async getTravelHealthAdvice(\n    destination: string,\n    healthConditions: string[],\n    travelDuration: string\n  ): Promise<{\n    vaccinations: string[];\n    medications: string[];\n    healthcare_facilities: string[];\n    travel_tips: string[];\n    emergency_contacts: string[];\n  }> {\n    try {\n      const prompt = `\nProvide travel health advice for:\n- Destination: ${destination}\n- Health conditions: ${healthConditions.join(', ')}\n- Travel duration: ${travelDuration}\n\nInclude vaccinations, medications, healthcare facilities to research, and travel tips.\n\nRespond in JSON format with arrays for each category.\n`;\n\n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a travel medicine specialist AI providing health advice for international travelers.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 800,\n        temperature: 0.3\n      });\n\n      return this.parseTravelHealthResponse(response);\n    } catch (error) {\n      console.error('Travel health advice failed:', error);\n      throw new Error(`Failed to get travel health advice: ${error}`);\n    }\n  }\n\n  /**\n   * Make authenticated request to Databricks endpoint\n   */\n  private async makeRequest(payload: any): Promise<any> {\n    if (!this.config.token || !this.config.workspace) {\n      throw new Error('Databricks configuration is incomplete. Check environment variables.');\n    }\n\n    console.log('Making request to URL:', this.baseUrl);\n    console.log('Request payload:', JSON.stringify(payload, null, 2));\n    console.log('Token length:', this.config.token.length);\n    console.log('Token starts with:', this.config.token.substring(0, 10) + '...');\n    console.log('Authorization header:', `Bearer ${this.config.token.substring(0, 10)}...`);\n\n    const headers = {\n      'Authorization': `Bearer ${this.config.token}`,\n      'Content-Type': 'application/json',\n    };\n\n    console.log('Request headers:', headers);\n\n    const response = await fetch(this.baseUrl, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload)\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Error response body:', errorText);\n      throw new Error(`Databricks API error (${response.status}): ${errorText}`);\n    }\n\n    const jsonResponse = await response.json();\n    console.log('Success response:', jsonResponse);\n    return jsonResponse;\n  }\n\n  /**\n   * Build detailed prompt for symptom analysis\n   */\n  private buildSymptomAnalysisPrompt(request: SymptomRequest): string {\n    const { symptoms, severity, duration, description, location, userProfile } = request;\n\n    return `\nAnalyze these symptoms and provide healthcare recommendations:\n\nSYMPTOMS: ${symptoms.join(', ')}\nSEVERITY: ${severity}\nDURATION: ${duration}\nDESCRIPTION: ${description}\n\nPATIENT CONTEXT:\n- Location: ${location.city || 'Unknown'}, ${location.state || 'Unknown'}\n- Age: ${userProfile?.age || 'Not specified'}\n- Gender: ${userProfile?.gender || 'Not specified'}\n- Medical History: ${userProfile?.medicalHistory?.join(', ') || 'None provided'}\n- Chronic Conditions: ${userProfile?.chronicConditions?.join(', ') || 'None provided'}\n- Current Medications: ${userProfile?.medications?.join(', ') || 'None provided'}\n- Allergies: ${userProfile?.allergies?.join(', ') || 'None provided'}\n\nPlease provide a detailed analysis in the following JSON format:\n{\n  \"recommendedCareType\": \"emergency|hospital|urgent_care|clinic|pharmacy|telehealth|home_care\",\n  \"urgency\": \"emergency|urgent|moderate|routine\",\n  \"confidence\": 0.85,\n  \"reasoning\": \"Detailed explanation of the recommendation\",\n  \"recommendations\": [\"Specific action items for the patient\"],\n  \"symptoms_analysis\": {\n    \"primary_symptoms\": [\"key symptoms\"],\n    \"severity_assessment\": \"assessment details\",\n    \"potential_conditions\": [\"possible conditions\"],\n    \"red_flags\": [\"warning signs if any\"]\n  },\n  \"next_steps\": [\"immediate actions to take\"],\n  \"when_to_seek_emergency_care\": [\"specific emergency warning signs\"],\n  \"estimated_wait_time\": \"15-30 minutes\",\n  \"cost_considerations\": \"Information about expected costs\"\n}\n\nIMPORTANT: Always err on the side of caution. If there are any concerning symptoms, recommend higher-level care.\n`;\n  }\n\n  /**\n   * Parse healthcare response from Databricks\n   */\n  private parseHealthcareResponse(response: any): HealthcareRecommendation {\n    try {\n      // Extract content from Databricks response format\n      let content = '';\n      if (response.messages && response.messages[0] && response.messages[0].content) {\n        // Databricks format: messages array\n        content = response.messages[0].content;\n      } else if (response.choices && response.choices[0] && response.choices[0].message) {\n        // OpenAI format: choices array\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        // Direct response\n        content = response.response;\n      } else {\n        throw new Error('Unexpected response format from Databricks');\n      }\n\n      // Try to parse JSON from the content\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0]);\n        \n        // Validate required fields and provide defaults\n        return {\n          recommendedCareType: parsed.recommendedCareType || 'clinic',\n          urgency: parsed.urgency || 'moderate',\n          confidence: parsed.confidence || 0.7,\n          reasoning: parsed.reasoning || 'Analysis completed',\n          recommendations: parsed.recommendations || ['Consult with a healthcare provider'],\n          symptoms_analysis: parsed.symptoms_analysis || {\n            primary_symptoms: [],\n            severity_assessment: 'Requires evaluation',\n            potential_conditions: [],\n            red_flags: []\n          },\n          next_steps: parsed.next_steps || ['Schedule an appointment'],\n          when_to_seek_emergency_care: parsed.when_to_seek_emergency_care || ['Severe symptoms develop'],\n          estimated_wait_time: parsed.estimated_wait_time,\n          cost_considerations: parsed.cost_considerations\n        };\n      } else {\n        // Fallback for non-JSON responses\n        return this.createFallbackRecommendation(content);\n      }\n    } catch (error) {\n      console.error('Failed to parse healthcare response:', error);\n      throw new Error('Invalid response format from healthcare AI');\n    }\n  }\n\n  /**\n   * Parse provider recommendations response\n   */\n  private parseProviderRecommendations(response: any): any {\n    try {\n      let content = '';\n      if (response.messages && response.messages[0] && response.messages[0].content) {\n        content = response.messages[0].content;\n      } else if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      }\n\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback\n      return {\n        recommended_types: ['clinic'],\n        search_keywords: ['healthcare'],\n        urgency_level: 'routine',\n        additional_info: 'Consult with a healthcare provider'\n      };\n    } catch (error) {\n      console.error('Failed to parse provider recommendations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse travel health response\n   */\n  private parseTravelHealthResponse(response: any): any {\n    try {\n      let content = '';\n      if (response.messages && response.messages[0] && response.messages[0].content) {\n        content = response.messages[0].content;\n      } else if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      }\n\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback\n      return {\n        vaccinations: [],\n        medications: [],\n        healthcare_facilities: [],\n        travel_tips: ['Consult with a travel medicine specialist'],\n        emergency_contacts: []\n      };\n    } catch (error) {\n      console.error('Failed to parse travel health response:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create fallback recommendation for non-JSON responses\n   */\n  private createFallbackRecommendation(content: string): HealthcareRecommendation {\n    // Analyze content for urgency keywords\n    const urgentKeywords = ['emergency', 'urgent', 'immediate', 'serious', 'severe'];\n    const isUrgent = urgentKeywords.some(keyword => \n      content.toLowerCase().includes(keyword)\n    );\n\n    return {\n      recommendedCareType: isUrgent ? 'urgent_care' : 'clinic',\n      urgency: isUrgent ? 'urgent' : 'moderate',\n      confidence: 0.6,\n      reasoning: 'AI analysis completed. Recommendation based on symptom assessment.',\n      recommendations: [content || 'Consult with a healthcare provider for proper evaluation'],\n      symptoms_analysis: {\n        primary_symptoms: [],\n        severity_assessment: 'Requires professional evaluation',\n        potential_conditions: [],\n        red_flags: []\n      },\n      next_steps: ['Schedule an appointment with an appropriate healthcare provider'],\n      when_to_seek_emergency_care: ['If symptoms worsen significantly', 'If you experience severe pain or difficulty breathing'],\n      estimated_wait_time: isUrgent ? '30-60 minutes' : '1-2 hours',\n      cost_considerations: 'Varies by provider and insurance coverage'\n    };\n  }\n\n  /**\n   * Get service status and configuration\n   */\n  public getStatus(): {\n    configured: boolean;\n    workspace: string;\n    endpoint: string;\n    hasToken: boolean;\n  } {\n    return {\n      configured: !!(this.config.token && this.config.workspace && this.config.agentEndpoint),\n      workspace: this.config.workspace,\n      endpoint: this.config.agentEndpoint,\n      hasToken: !!this.config.token\n    };\n  }\n}\n\nexport default DatabricksService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}