{"ast":null,"code":"var _PlacesService;\nimport { GOOGLE_MAPS_CONFIG } from '../config/google';\nclass PlacesService {\n  constructor() {\n    this.isInitialized = false;\n  }\n  static getInstance() {\n    if (!PlacesService.instance) {\n      PlacesService.instance = new PlacesService();\n    }\n    return PlacesService.instance;\n  }\n\n  /**\n   * Initialize Google Places service\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n    try {\n      var _window$google, _window$google$maps;\n      if (!((_window$google = window.google) !== null && _window$google !== void 0 && (_window$google$maps = _window$google.maps) !== null && _window$google$maps !== void 0 && _window$google$maps.places)) {\n        // Load Google Maps script directly\n        await this.loadGoogleMapsScript();\n      }\n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize Google Places:', error);\n      throw new Error('Google Places initialization failed');\n    }\n  }\n  async loadGoogleMapsScript() {\n    return new Promise((resolve, reject) => {\n      var _window$google2, _window$google2$maps;\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (existingScript && (_window$google2 = window.google) !== null && _window$google2 !== void 0 && (_window$google2$maps = _window$google2.maps) !== null && _window$google2$maps !== void 0 && _window$google2$maps.places) {\n        resolve();\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_CONFIG.API_KEY}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Google Maps script'));\n      if (!existingScript) {\n        document.head.appendChild(script);\n      }\n    });\n  }\n\n  /**\n   * Search for healthcare providers near a location\n   */\n  async searchNearbyProviders(location, filters = {}) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    const {\n      type = 'all',\n      radius = 5000,\n      minRating = 0,\n      isOpen,\n      keyword\n    } = filters;\n\n    // For now, let's use a simple approach with mock data since the new API may not be fully available\n    // This provides immediate functionality while we work on full integration\n    return this.getMockHealthcareProviders(location, type, radius);\n  }\n  getMockHealthcareProviders(location, type, radius) {\n    const mockProviders = [{\n      id: 'mock-hospital-1',\n      placeId: 'mock-hospital-1',\n      name: 'City General Hospital',\n      address: '123 Medical Center Dr, Downtown',\n      location: {\n        lat: location.lat + 0.01,\n        lng: location.lng + 0.01\n      },\n      type: 'hospital',\n      rating: 4.2,\n      totalRatings: 156,\n      businessStatus: 'OPERATIONAL',\n      distance: this.calculateDistance(location, {\n        lat: location.lat + 0.01,\n        lng: location.lng + 0.01\n      })\n    }, {\n      id: 'mock-urgent-1',\n      placeId: 'mock-urgent-1',\n      name: 'QuickCare Urgent Care',\n      address: '456 Health St, Midtown',\n      location: {\n        lat: location.lat - 0.008,\n        lng: location.lng + 0.012\n      },\n      type: 'urgent_care',\n      rating: 4.5,\n      totalRatings: 89,\n      businessStatus: 'OPERATIONAL',\n      distance: this.calculateDistance(location, {\n        lat: location.lat - 0.008,\n        lng: location.lng + 0.012\n      })\n    }, {\n      id: 'mock-pharmacy-1',\n      placeId: 'mock-pharmacy-1',\n      name: 'MediPlex Pharmacy',\n      address: '789 Wellness Ave, Uptown',\n      location: {\n        lat: location.lat + 0.015,\n        lng: location.lng - 0.005\n      },\n      type: 'pharmacy',\n      rating: 4.8,\n      totalRatings: 234,\n      businessStatus: 'OPERATIONAL',\n      distance: this.calculateDistance(location, {\n        lat: location.lat + 0.015,\n        lng: location.lng - 0.005\n      })\n    }, {\n      id: 'mock-clinic-1',\n      placeId: 'mock-clinic-1',\n      name: 'Family Health Clinic',\n      address: '321 Care Blvd, Westside',\n      location: {\n        lat: location.lat - 0.012,\n        lng: location.lng - 0.008\n      },\n      type: 'clinic',\n      rating: 4.3,\n      totalRatings: 67,\n      businessStatus: 'OPERATIONAL',\n      distance: this.calculateDistance(location, {\n        lat: location.lat - 0.012,\n        lng: location.lng - 0.008\n      })\n    }, {\n      id: 'mock-dentist-1',\n      placeId: 'mock-dentist-1',\n      name: 'Smile Dental Care',\n      address: '654 Tooth Lane, Eastside',\n      location: {\n        lat: location.lat + 0.006,\n        lng: location.lng + 0.018\n      },\n      type: 'dentist',\n      rating: 4.7,\n      totalRatings: 123,\n      businessStatus: 'OPERATIONAL',\n      distance: this.calculateDistance(location, {\n        lat: location.lat + 0.006,\n        lng: location.lng + 0.018\n      })\n    }];\n\n    // Filter by type if specified\n    if (type !== 'all') {\n      return mockProviders.filter(provider => provider.type === type);\n    }\n    return mockProviders;\n  }\n\n  /**\n   * Search for healthcare providers by text query\n   */\n  async searchByText(query, location, radius = 10000) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // For now, return filtered mock data based on query\n    const mockProviders = this.getMockHealthcareProviders(location || {\n      lat: 40.7128,\n      lng: -74.0060\n    }, 'all', radius);\n\n    // Simple text filtering\n    const filteredProviders = mockProviders.filter(provider => provider.name.toLowerCase().includes(query.toLowerCase()) || provider.address.toLowerCase().includes(query.toLowerCase()) || provider.type.toLowerCase().includes(query.toLowerCase()));\n    return filteredProviders;\n  }\n\n  /**\n   * Get detailed information about a specific place\n   */\n  async getPlaceDetails(placeId) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // For mock data, return enhanced details\n    const mockProviders = this.getMockHealthcareProviders({\n      lat: 40.7128,\n      lng: -74.0060\n    }, 'all', 10000);\n    const provider = mockProviders.find(p => p.placeId === placeId);\n    if (!provider) {\n      throw new Error('Place not found');\n    }\n    const details = {\n      ...provider,\n      phone: '+1 (555) 123-4567',\n      website: 'https://example.com',\n      hours: {\n        isOpen: true,\n        periods: [{\n          open: {\n            day: 1,\n            time: '0800'\n          },\n          close: {\n            day: 1,\n            time: '1700'\n          }\n        }]\n      }\n    };\n    return details;\n  }\n\n  /**\n   * Find healthcare providers by specialty\n   */\n  async findSpecialists(specialty, location, radius = 10000) {\n    const specialtyQueries = this.getSpecialtyQueries(specialty);\n    const allResults = [];\n    for (const query of specialtyQueries) {\n      try {\n        const results = await this.searchByText(`${query} near ${location.address || `${location.lat},${location.lng}`}`, location, radius);\n        allResults.push(...results);\n      } catch (error) {\n        console.warn(`Search failed for ${query}:`, error);\n      }\n    }\n\n    // Remove duplicates based on place ID\n    const uniqueResults = allResults.filter((provider, index, self) => index === self.findIndex(p => p.placeId === provider.placeId));\n    return uniqueResults;\n  }\n\n  /**\n   * Get provider photos\n   */\n  getPhotoUrl(photoReference, maxWidth = 400, maxHeight) {\n    const params = new URLSearchParams({\n      photoreference: photoReference,\n      key: GOOGLE_MAPS_CONFIG.API_KEY,\n      maxwidth: maxWidth.toString(),\n      ...(maxHeight && {\n        maxheight: maxHeight.toString()\n      })\n    });\n    return `https://maps.googleapis.com/maps/api/place/photo?${params.toString()}`;\n  }\n  convertToHealthcareProvider(place, userLocation) {\n    var _place$geometry, _place$geometry$locat, _place$geometry2, _place$geometry2$loca;\n    const location = {\n      lat: ((_place$geometry = place.geometry) === null || _place$geometry === void 0 ? void 0 : (_place$geometry$locat = _place$geometry.location) === null || _place$geometry$locat === void 0 ? void 0 : _place$geometry$locat.lat()) || 0,\n      lng: ((_place$geometry2 = place.geometry) === null || _place$geometry2 === void 0 ? void 0 : (_place$geometry2$loca = _place$geometry2.location) === null || _place$geometry2$loca === void 0 ? void 0 : _place$geometry2$loca.lng()) || 0\n    };\n    const provider = {\n      id: place.place_id || `place_${Date.now()}_${Math.random()}`,\n      placeId: place.place_id || '',\n      name: place.name || 'Unknown Provider',\n      address: place.vicinity || place.formatted_address || 'Address not available',\n      location,\n      type: this.determineProviderType(place.types || []),\n      rating: place.rating,\n      totalRatings: place.user_ratings_total,\n      priceLevel: place.price_level,\n      businessStatus: place.business_status,\n      ...(place.photos && place.photos.length > 0 && {\n        photos: place.photos.slice(0, 5).map(photo => this.getPhotoUrl(photo.photo_reference))\n      })\n    };\n\n    // Calculate distance if user location is provided\n    if (userLocation) {\n      provider.distance = this.calculateDistance(userLocation, location);\n    }\n    return provider;\n  }\n  convertToPlaceDetails(place) {\n    var _place$opening_hours$, _place$opening_hours, _place$geometry3;\n    const baseProvider = this.convertToHealthcareProvider(place);\n    const details = {\n      ...baseProvider,\n      phone: place.formatted_phone_number,\n      website: place.website,\n      utcOffset: place.utc_offset_minutes,\n      ...(place.opening_hours && {\n        hours: {\n          isOpen: ((_place$opening_hours$ = (_place$opening_hours = place.opening_hours).isOpen) === null || _place$opening_hours$ === void 0 ? void 0 : _place$opening_hours$.call(_place$opening_hours)) || false,\n          periods: (place.opening_hours.periods || []).map(period => {\n            var _period$open, _period$open2, _period$close, _period$close2;\n            return {\n              open: {\n                day: ((_period$open = period.open) === null || _period$open === void 0 ? void 0 : _period$open.day) || 0,\n                time: ((_period$open2 = period.open) === null || _period$open2 === void 0 ? void 0 : _period$open2.time) || '0000'\n              },\n              close: {\n                day: ((_period$close = period.close) === null || _period$close === void 0 ? void 0 : _period$close.day) || 0,\n                time: ((_period$close2 = period.close) === null || _period$close2 === void 0 ? void 0 : _period$close2.time) || '2359'\n              }\n            };\n          })\n        }\n      }),\n      ...(place.reviews && {\n        reviews: place.reviews.map(review => ({\n          author: review.author_name,\n          rating: review.rating,\n          text: review.text,\n          time: review.time\n        }))\n      }),\n      ...(((_place$geometry3 = place.geometry) === null || _place$geometry3 === void 0 ? void 0 : _place$geometry3.viewport) && {\n        geometry: {\n          viewport: {\n            northeast: {\n              lat: place.geometry.viewport.getNorthEast().lat(),\n              lng: place.geometry.viewport.getNorthEast().lng()\n            },\n            southwest: {\n              lat: place.geometry.viewport.getSouthWest().lat(),\n              lng: place.geometry.viewport.getSouthWest().lng()\n            }\n          }\n        }\n      })\n    };\n    return details;\n  }\n  getGooglePlaceType(type) {\n    switch (type) {\n      case 'hospital':\n        return 'hospital';\n      case 'pharmacy':\n        return 'pharmacy';\n      case 'dentist':\n        return 'dentist';\n      case 'veterinarian':\n        return 'veterinary_care';\n      case 'doctor':\n      case 'clinic':\n      case 'urgent_care':\n        return 'doctor';\n      case 'physiotherapist':\n        return 'physiotherapist';\n      default:\n        return 'health';\n    }\n  }\n  determineProviderType(types) {\n    if (types.includes('hospital')) return 'hospital';\n    if (types.includes('pharmacy')) return 'pharmacy';\n    if (types.includes('dentist')) return 'dentist';\n    if (types.includes('veterinary_care')) return 'veterinarian';\n    if (types.includes('physiotherapist')) return 'physiotherapist';\n    if (types.includes('doctor')) return 'doctor';\n    if (types.includes('health')) return 'health';\n\n    // Try to determine from name patterns\n    const name = types.join(' ').toLowerCase();\n    if (name.includes('urgent') || name.includes('emergency')) return 'urgent_care';\n    if (name.includes('clinic')) return 'clinic';\n    return 'health';\n  }\n  getSpecialtyQueries(specialty) {\n    const specialtyMap = {\n      'cardiology': ['cardiologist', 'heart doctor', 'cardiac specialist'],\n      'dermatology': ['dermatologist', 'skin doctor'],\n      'neurology': ['neurologist', 'brain doctor'],\n      'orthopedics': ['orthopedist', 'bone doctor', 'sports medicine'],\n      'psychiatry': ['psychiatrist', 'mental health'],\n      'pediatrics': ['pediatrician', 'children doctor'],\n      'gynecology': ['gynecologist', 'womens health'],\n      'ophthalmology': ['eye doctor', 'ophthalmologist'],\n      'urology': ['urologist'],\n      'oncology': ['oncologist', 'cancer doctor'],\n      'endocrinology': ['endocrinologist', 'diabetes doctor'],\n      'gastroenterology': ['gastroenterologist', 'stomach doctor'],\n      'nephrology': ['nephrologist', 'kidney doctor'],\n      'pulmonology': ['pulmonologist', 'lung doctor'],\n      'rheumatology': ['rheumatologist', 'arthritis doctor'],\n      'allergy': ['allergist', 'allergy doctor'],\n      'dialysis': ['dialysis center', 'kidney dialysis', 'hemodialysis'],\n      'sti': ['sexual health clinic', 'std testing', 'reproductive health'],\n      'covid': ['covid testing', 'coronavirus testing', 'urgent care']\n    };\n    const lowerSpecialty = specialty.toLowerCase();\n    return specialtyMap[lowerSpecialty] || [specialty];\n  }\n  calculateDistance(from, to) {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(to.lat - from.lat);\n    const dLng = this.toRadians(to.lng - from.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(from.lat)) * Math.cos(this.toRadians(to.lat)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n}\n_PlacesService = PlacesService;\nPlacesService.instance = void 0;\nexport default PlacesService.getInstance();","map":{"version":3,"names":["GOOGLE_MAPS_CONFIG","PlacesService","constructor","isInitialized","getInstance","instance","initialize","_window$google","_window$google$maps","window","google","maps","places","loadGoogleMapsScript","error","console","Error","Promise","resolve","reject","_window$google2","_window$google2$maps","existingScript","document","querySelector","script","createElement","src","API_KEY","async","defer","onload","onerror","head","appendChild","searchNearbyProviders","location","filters","type","radius","minRating","isOpen","keyword","getMockHealthcareProviders","mockProviders","id","placeId","name","address","lat","lng","rating","totalRatings","businessStatus","distance","calculateDistance","filter","provider","searchByText","query","filteredProviders","toLowerCase","includes","getPlaceDetails","find","p","details","phone","website","hours","periods","open","day","time","close","findSpecialists","specialty","specialtyQueries","getSpecialtyQueries","allResults","results","push","warn","uniqueResults","index","self","findIndex","getPhotoUrl","photoReference","maxWidth","maxHeight","params","URLSearchParams","photoreference","key","maxwidth","toString","maxheight","convertToHealthcareProvider","place","userLocation","_place$geometry","_place$geometry$locat","_place$geometry2","_place$geometry2$loca","geometry","place_id","Date","now","Math","random","vicinity","formatted_address","determineProviderType","types","user_ratings_total","priceLevel","price_level","business_status","photos","length","slice","map","photo","photo_reference","convertToPlaceDetails","_place$opening_hours$","_place$opening_hours","_place$geometry3","baseProvider","formatted_phone_number","utcOffset","utc_offset_minutes","opening_hours","call","period","_period$open","_period$open2","_period$close","_period$close2","reviews","review","author","author_name","text","viewport","northeast","getNorthEast","southwest","getSouthWest","getGooglePlaceType","join","specialtyMap","lowerSpecialty","from","to","R","dLat","toRadians","dLng","a","sin","cos","c","atan2","sqrt","degrees","PI","_PlacesService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/placesService.ts"],"sourcesContent":["import { GOOGLE_MAPS_CONFIG } from '../config/google';\nimport { Location } from './locationService';\n\nexport interface HealthcareProvider {\n  id: string;\n  name: string;\n  address: string;\n  location: Location;\n  type: ProviderType;\n  rating?: number;\n  totalRatings?: number;\n  priceLevel?: number;\n  phone?: string;\n  website?: string;\n  hours?: {\n    isOpen: boolean;\n    periods: Array<{\n      open: { day: number; time: string };\n      close: { day: number; time: string };\n    }>;\n  };\n  photos?: string[];\n  distance?: number;\n  placeId: string;\n  businessStatus?: 'OPERATIONAL' | 'CLOSED_TEMPORARILY' | 'CLOSED_PERMANENTLY';\n}\n\nexport type ProviderType = \n  | 'hospital' \n  | 'urgent_care' \n  | 'clinic' \n  | 'pharmacy' \n  | 'dentist' \n  | 'veterinarian'\n  | 'physiotherapist'\n  | 'doctor'\n  | 'health';\n\nexport interface SearchFilters {\n  type?: ProviderType | 'all';\n  radius?: number; // in meters\n  minRating?: number;\n  priceLevel?: number[];\n  isOpen?: boolean;\n  keyword?: string;\n}\n\nexport interface PlaceDetails extends HealthcareProvider {\n  reviews?: Array<{\n    author: string;\n    rating: number;\n    text: string;\n    time: number;\n  }>;\n  geometry?: {\n    viewport: {\n      northeast: { lat: number; lng: number };\n      southwest: { lat: number; lng: number };\n    };\n  };\n  utcOffset?: number;\n  services?: string[];\n  accessibility?: {\n    wheelchairAccessible?: boolean;\n  };\n}\n\nclass PlacesService {\n  private static instance: PlacesService;\n  private isInitialized = false;\n\n  private constructor() {}\n\n  public static getInstance(): PlacesService {\n    if (!PlacesService.instance) {\n      PlacesService.instance = new PlacesService();\n    }\n    return PlacesService.instance;\n  }\n\n  /**\n   * Initialize Google Places service\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      if (!window.google?.maps?.places) {\n        // Load Google Maps script directly\n        await this.loadGoogleMapsScript();\n      }\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize Google Places:', error);\n      throw new Error('Google Places initialization failed');\n    }\n  }\n\n  private async loadGoogleMapsScript(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (existingScript && window.google?.maps?.places) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_CONFIG.API_KEY}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Google Maps script'));\n\n      if (!existingScript) {\n        document.head.appendChild(script);\n      }\n    });\n  }\n\n  /**\n   * Search for healthcare providers near a location\n   */\n  public async searchNearbyProviders(\n    location: Location,\n    filters: SearchFilters = {}\n  ): Promise<HealthcareProvider[]> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const {\n      type = 'all',\n      radius = 5000,\n      minRating = 0,\n      isOpen,\n      keyword\n    } = filters;\n\n    // For now, let's use a simple approach with mock data since the new API may not be fully available\n    // This provides immediate functionality while we work on full integration\n    return this.getMockHealthcareProviders(location, type, radius);\n  }\n\n  private getMockHealthcareProviders(location: Location, type: ProviderType | 'all', radius: number): HealthcareProvider[] {\n    const mockProviders: HealthcareProvider[] = [\n      {\n        id: 'mock-hospital-1',\n        placeId: 'mock-hospital-1',\n        name: 'City General Hospital',\n        address: '123 Medical Center Dr, Downtown',\n        location: { lat: location.lat + 0.01, lng: location.lng + 0.01 },\n        type: 'hospital',\n        rating: 4.2,\n        totalRatings: 156,\n        businessStatus: 'OPERATIONAL',\n        distance: this.calculateDistance(location, { lat: location.lat + 0.01, lng: location.lng + 0.01 })\n      },\n      {\n        id: 'mock-urgent-1',\n        placeId: 'mock-urgent-1',\n        name: 'QuickCare Urgent Care',\n        address: '456 Health St, Midtown',\n        location: { lat: location.lat - 0.008, lng: location.lng + 0.012 },\n        type: 'urgent_care',\n        rating: 4.5,\n        totalRatings: 89,\n        businessStatus: 'OPERATIONAL',\n        distance: this.calculateDistance(location, { lat: location.lat - 0.008, lng: location.lng + 0.012 })\n      },\n      {\n        id: 'mock-pharmacy-1',\n        placeId: 'mock-pharmacy-1',\n        name: 'MediPlex Pharmacy',\n        address: '789 Wellness Ave, Uptown',\n        location: { lat: location.lat + 0.015, lng: location.lng - 0.005 },\n        type: 'pharmacy',\n        rating: 4.8,\n        totalRatings: 234,\n        businessStatus: 'OPERATIONAL',\n        distance: this.calculateDistance(location, { lat: location.lat + 0.015, lng: location.lng - 0.005 })\n      },\n      {\n        id: 'mock-clinic-1',\n        placeId: 'mock-clinic-1',\n        name: 'Family Health Clinic',\n        address: '321 Care Blvd, Westside',\n        location: { lat: location.lat - 0.012, lng: location.lng - 0.008 },\n        type: 'clinic',\n        rating: 4.3,\n        totalRatings: 67,\n        businessStatus: 'OPERATIONAL',\n        distance: this.calculateDistance(location, { lat: location.lat - 0.012, lng: location.lng - 0.008 })\n      },\n      {\n        id: 'mock-dentist-1',\n        placeId: 'mock-dentist-1',\n        name: 'Smile Dental Care',\n        address: '654 Tooth Lane, Eastside',\n        location: { lat: location.lat + 0.006, lng: location.lng + 0.018 },\n        type: 'dentist',\n        rating: 4.7,\n        totalRatings: 123,\n        businessStatus: 'OPERATIONAL',\n        distance: this.calculateDistance(location, { lat: location.lat + 0.006, lng: location.lng + 0.018 })\n      }\n    ];\n\n    // Filter by type if specified\n    if (type !== 'all') {\n      return mockProviders.filter(provider => provider.type === type);\n    }\n\n    return mockProviders;\n  }\n\n  /**\n   * Search for healthcare providers by text query\n   */\n  public async searchByText(\n    query: string,\n    location?: Location,\n    radius: number = 10000\n  ): Promise<HealthcareProvider[]> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // For now, return filtered mock data based on query\n    const mockProviders = this.getMockHealthcareProviders(location || { lat: 40.7128, lng: -74.0060 }, 'all', radius);\n    \n    // Simple text filtering\n    const filteredProviders = mockProviders.filter(provider => \n      provider.name.toLowerCase().includes(query.toLowerCase()) ||\n      provider.address.toLowerCase().includes(query.toLowerCase()) ||\n      provider.type.toLowerCase().includes(query.toLowerCase())\n    );\n\n    return filteredProviders;\n  }\n\n  /**\n   * Get detailed information about a specific place\n   */\n  public async getPlaceDetails(placeId: string): Promise<PlaceDetails> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    // For mock data, return enhanced details\n    const mockProviders = this.getMockHealthcareProviders({ lat: 40.7128, lng: -74.0060 }, 'all', 10000);\n    const provider = mockProviders.find(p => p.placeId === placeId);\n    \n    if (!provider) {\n      throw new Error('Place not found');\n    }\n\n    const details: PlaceDetails = {\n      ...provider,\n      phone: '+1 (555) 123-4567',\n      website: 'https://example.com',\n      hours: {\n        isOpen: true,\n        periods: [\n          {\n            open: { day: 1, time: '0800' },\n            close: { day: 1, time: '1700' }\n          }\n        ]\n      }\n    };\n\n    return details;\n  }\n\n  /**\n   * Find healthcare providers by specialty\n   */\n  public async findSpecialists(\n    specialty: string,\n    location: Location,\n    radius: number = 10000\n  ): Promise<HealthcareProvider[]> {\n    const specialtyQueries = this.getSpecialtyQueries(specialty);\n    const allResults: HealthcareProvider[] = [];\n\n    for (const query of specialtyQueries) {\n      try {\n        const results = await this.searchByText(\n          `${query} near ${location.address || `${location.lat},${location.lng}`}`,\n          location,\n          radius\n        );\n        allResults.push(...results);\n      } catch (error) {\n        console.warn(`Search failed for ${query}:`, error);\n      }\n    }\n\n    // Remove duplicates based on place ID\n    const uniqueResults = allResults.filter((provider, index, self) => \n      index === self.findIndex(p => p.placeId === provider.placeId)\n    );\n\n    return uniqueResults;\n  }\n\n  /**\n   * Get provider photos\n   */\n  public getPhotoUrl(\n    photoReference: string, \n    maxWidth: number = 400, \n    maxHeight?: number\n  ): string {\n    const params = new URLSearchParams({\n      photoreference: photoReference,\n      key: GOOGLE_MAPS_CONFIG.API_KEY,\n      maxwidth: maxWidth.toString(),\n      ...(maxHeight && { maxheight: maxHeight.toString() })\n    });\n\n    return `https://maps.googleapis.com/maps/api/place/photo?${params.toString()}`;\n  }\n\n\n  private convertToHealthcareProvider(\n    place: google.maps.places.PlaceResult,\n    userLocation?: Location\n  ): HealthcareProvider {\n    const location: Location = {\n      lat: place.geometry?.location?.lat() || 0,\n      lng: place.geometry?.location?.lng() || 0\n    };\n\n    const provider: HealthcareProvider = {\n      id: place.place_id || `place_${Date.now()}_${Math.random()}`,\n      placeId: place.place_id || '',\n      name: place.name || 'Unknown Provider',\n      address: place.vicinity || place.formatted_address || 'Address not available',\n      location,\n      type: this.determineProviderType(place.types || []),\n      rating: place.rating,\n      totalRatings: place.user_ratings_total,\n      priceLevel: place.price_level,\n      businessStatus: (place as any).business_status,\n      ...(place.photos && place.photos.length > 0 && {\n        photos: place.photos.slice(0, 5).map(photo => \n          this.getPhotoUrl((photo as any).photo_reference)\n        )\n      })\n    };\n\n    // Calculate distance if user location is provided\n    if (userLocation) {\n      provider.distance = this.calculateDistance(userLocation, location);\n    }\n\n    return provider;\n  }\n\n\n  private convertToPlaceDetails(place: google.maps.places.PlaceResult): PlaceDetails {\n    const baseProvider = this.convertToHealthcareProvider(place);\n    \n    const details: PlaceDetails = {\n      ...baseProvider,\n      phone: place.formatted_phone_number,\n      website: place.website,\n      utcOffset: place.utc_offset_minutes,\n      ...(place.opening_hours && {\n        hours: {\n          isOpen: place.opening_hours.isOpen?.() || false,\n          periods: (place.opening_hours.periods || []).map(period => ({\n            open: {\n              day: period.open?.day || 0,\n              time: period.open?.time || '0000'\n            },\n            close: {\n              day: period.close?.day || 0,\n              time: period.close?.time || '2359'\n            }\n          }))\n        }\n      }),\n      ...(place.reviews && {\n        reviews: place.reviews.map(review => ({\n          author: review.author_name,\n          rating: review.rating,\n          text: review.text,\n          time: review.time\n        }))\n      }),\n      ...(place.geometry?.viewport && {\n        geometry: {\n          viewport: {\n            northeast: {\n              lat: place.geometry.viewport.getNorthEast().lat(),\n              lng: place.geometry.viewport.getNorthEast().lng()\n            },\n            southwest: {\n              lat: place.geometry.viewport.getSouthWest().lat(),\n              lng: place.geometry.viewport.getSouthWest().lng()\n            }\n          }\n        }\n      })\n    };\n\n    return details;\n  }\n\n\n  private getGooglePlaceType(type: ProviderType | 'all'): string {\n    switch (type) {\n      case 'hospital':\n        return 'hospital';\n      case 'pharmacy':\n        return 'pharmacy';\n      case 'dentist':\n        return 'dentist';\n      case 'veterinarian':\n        return 'veterinary_care';\n      case 'doctor':\n      case 'clinic':\n      case 'urgent_care':\n        return 'doctor';\n      case 'physiotherapist':\n        return 'physiotherapist';\n      default:\n        return 'health';\n    }\n  }\n\n  private determineProviderType(types: string[]): ProviderType {\n    if (types.includes('hospital')) return 'hospital';\n    if (types.includes('pharmacy')) return 'pharmacy';\n    if (types.includes('dentist')) return 'dentist';\n    if (types.includes('veterinary_care')) return 'veterinarian';\n    if (types.includes('physiotherapist')) return 'physiotherapist';\n    if (types.includes('doctor')) return 'doctor';\n    if (types.includes('health')) return 'health';\n    \n    // Try to determine from name patterns\n    const name = types.join(' ').toLowerCase();\n    if (name.includes('urgent') || name.includes('emergency')) return 'urgent_care';\n    if (name.includes('clinic')) return 'clinic';\n    \n    return 'health';\n  }\n\n  private getSpecialtyQueries(specialty: string): string[] {\n    const specialtyMap: Record<string, string[]> = {\n      'cardiology': ['cardiologist', 'heart doctor', 'cardiac specialist'],\n      'dermatology': ['dermatologist', 'skin doctor'],\n      'neurology': ['neurologist', 'brain doctor'],\n      'orthopedics': ['orthopedist', 'bone doctor', 'sports medicine'],\n      'psychiatry': ['psychiatrist', 'mental health'],\n      'pediatrics': ['pediatrician', 'children doctor'],\n      'gynecology': ['gynecologist', 'womens health'],\n      'ophthalmology': ['eye doctor', 'ophthalmologist'],\n      'urology': ['urologist'],\n      'oncology': ['oncologist', 'cancer doctor'],\n      'endocrinology': ['endocrinologist', 'diabetes doctor'],\n      'gastroenterology': ['gastroenterologist', 'stomach doctor'],\n      'nephrology': ['nephrologist', 'kidney doctor'],\n      'pulmonology': ['pulmonologist', 'lung doctor'],\n      'rheumatology': ['rheumatologist', 'arthritis doctor'],\n      'allergy': ['allergist', 'allergy doctor'],\n      'dialysis': ['dialysis center', 'kidney dialysis', 'hemodialysis'],\n      'sti': ['sexual health clinic', 'std testing', 'reproductive health'],\n      'covid': ['covid testing', 'coronavirus testing', 'urgent care']\n    };\n\n    const lowerSpecialty = specialty.toLowerCase();\n    return specialtyMap[lowerSpecialty] || [specialty];\n  }\n\n  private calculateDistance(from: Location, to: Location): number {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(to.lat - from.lat);\n    const dLng = this.toRadians(to.lng - from.lng);\n    \n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(from.lat)) * Math.cos(this.toRadians(to.lat)) *\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}\n\nexport default PlacesService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}