{"ast":null,"code":"var _DatabricksService;class DatabricksService{constructor(){this.config=void 0;this.baseUrl=void 0;this.config={token:process.env.REACT_APP_DATABRICKS_TOKEN||'',workspace:process.env.REACT_APP_DATABRICKS_WORKSPACE||'',agentEndpoint:process.env.REACT_APP_DATABRICKS_AGENT_ENDPOINT||''};this.baseUrl=\"https://\".concat(this.config.workspace,\"/serving-endpoints/\").concat(this.config.agentEndpoint,\"/invocations\");}static getInstance(){if(!DatabricksService.instance){DatabricksService.instance=new DatabricksService();}return DatabricksService.instance;}/**\n   * Test connection to Databricks endpoint\n   */async testConnection(){try{console.log('Testing connection to:',this.baseUrl);console.log('With token:',this.config.token?'Present (length: '+this.config.token.length+')':'Missing');const response=await this.makeRequest({messages:[{role:'user',content:'Hello, are you working?'}]});console.log('Connection test response:',response);return response.choices&&response.choices.length>0;}catch(error){console.error('Databricks connection test failed:',error);console.error('URL attempted:',this.baseUrl);return false;}}/**\n   * Analyze symptoms and get healthcare recommendations\n   */async analyzeSymptoms(request){try{const prompt=this.buildSymptomAnalysisPrompt(request);const response=await this.makeRequest({messages:[{role:'system',content:'You are a healthcare AI assistant that analyzes symptoms and provides healthcare recommendations. Always prioritize patient safety and recommend seeking emergency care when appropriate. Provide structured JSON responses.'},{role:'user',content:prompt}],max_tokens:1000,temperature:0.3});return this.parseHealthcareResponse(response);}catch(error){console.error('Symptom analysis failed:',error);throw new Error(\"Failed to analyze symptoms: \".concat(error));}}/**\n   * Get healthcare provider recommendations based on condition/specialty\n   */async getProviderRecommendations(condition,location){let urgency=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'routine';try{const prompt=\"\\nBased on the medical condition \\\"\".concat(condition,\"\\\" and urgency level \\\"\").concat(urgency,\"\\\", recommend:\\n1. Most appropriate healthcare provider types\\n2. Search keywords for finding providers\\n3. Any specific considerations\\n\\nLocation: \").concat(location.city,\", \").concat(location.state,\"\\n\\nRespond in JSON format:\\n{\\n  \\\"recommended_types\\\": [\\\"hospital\\\", \\\"urgent_care\\\", \\\"clinic\\\", \\\"specialist\\\"],\\n  \\\"search_keywords\\\": [\\\"cardiology\\\", \\\"emergency\\\", \\\"urgent care\\\"],\\n  \\\"urgency_level\\\": \\\"urgent\\\",\\n  \\\"additional_info\\\": \\\"Patient should seek immediate care...\\\"\\n}\\n\");const response=await this.makeRequest({messages:[{role:'system',content:'You are a healthcare navigation AI that helps patients find appropriate care providers based on their condition and location.'},{role:'user',content:prompt}],max_tokens:500,temperature:0.2});return this.parseProviderRecommendations(response);}catch(error){console.error('Provider recommendations failed:',error);throw new Error(\"Failed to get provider recommendations: \".concat(error));}}/**\n   * Get travel health recommendations\n   */async getTravelHealthAdvice(destination,healthConditions,travelDuration){try{const prompt=\"\\nProvide travel health advice for:\\n- Destination: \".concat(destination,\"\\n- Health conditions: \").concat(healthConditions.join(', '),\"\\n- Travel duration: \").concat(travelDuration,\"\\n\\nInclude vaccinations, medications, healthcare facilities to research, and travel tips.\\n\\nRespond in JSON format with arrays for each category.\\n\");const response=await this.makeRequest({messages:[{role:'system',content:'You are a travel medicine specialist AI providing health advice for international travelers.'},{role:'user',content:prompt}],max_tokens:800,temperature:0.3});return this.parseTravelHealthResponse(response);}catch(error){console.error('Travel health advice failed:',error);throw new Error(\"Failed to get travel health advice: \".concat(error));}}/**\n   * Make authenticated request to Databricks endpoint\n   */async makeRequest(payload){if(!this.config.token||!this.config.workspace){throw new Error('Databricks configuration is incomplete. Check environment variables.');}console.log('Making request to URL:',this.baseUrl);console.log('Request payload:',JSON.stringify(payload,null,2));console.log('Token length:',this.config.token.length);console.log('Token starts with:',this.config.token.substring(0,10)+'...');console.log('Authorization header:',\"Bearer \".concat(this.config.token.substring(0,10),\"...\"));const headers={'Authorization':\"Bearer \".concat(this.config.token),'Content-Type':'application/json'};console.log('Request headers:',headers);const response=await fetch(this.baseUrl,{method:'POST',headers:headers,body:JSON.stringify(payload)});console.log('Response status:',response.status);console.log('Response headers:',Object.fromEntries(response.headers.entries()));if(!response.ok){const errorText=await response.text();console.error('Error response body:',errorText);throw new Error(\"Databricks API error (\".concat(response.status,\"): \").concat(errorText));}const jsonResponse=await response.json();console.log('Success response:',jsonResponse);return jsonResponse;}/**\n   * Build detailed prompt for symptom analysis\n   */buildSymptomAnalysisPrompt(request){var _userProfile$medicalH,_userProfile$chronicC,_userProfile$medicati,_userProfile$allergie;const{symptoms,severity,duration,description,location,userProfile}=request;return\"\\nAnalyze these symptoms and provide healthcare recommendations:\\n\\nSYMPTOMS: \".concat(symptoms.join(', '),\"\\nSEVERITY: \").concat(severity,\"\\nDURATION: \").concat(duration,\"\\nDESCRIPTION: \").concat(description,\"\\n\\nPATIENT CONTEXT:\\n- Location: \").concat(location.city||'Unknown',\", \").concat(location.state||'Unknown',\"\\n- Age: \").concat((userProfile===null||userProfile===void 0?void 0:userProfile.age)||'Not specified',\"\\n- Gender: \").concat((userProfile===null||userProfile===void 0?void 0:userProfile.gender)||'Not specified',\"\\n- Medical History: \").concat((userProfile===null||userProfile===void 0?void 0:(_userProfile$medicalH=userProfile.medicalHistory)===null||_userProfile$medicalH===void 0?void 0:_userProfile$medicalH.join(', '))||'None provided',\"\\n- Chronic Conditions: \").concat((userProfile===null||userProfile===void 0?void 0:(_userProfile$chronicC=userProfile.chronicConditions)===null||_userProfile$chronicC===void 0?void 0:_userProfile$chronicC.join(', '))||'None provided',\"\\n- Current Medications: \").concat((userProfile===null||userProfile===void 0?void 0:(_userProfile$medicati=userProfile.medications)===null||_userProfile$medicati===void 0?void 0:_userProfile$medicati.join(', '))||'None provided',\"\\n- Allergies: \").concat((userProfile===null||userProfile===void 0?void 0:(_userProfile$allergie=userProfile.allergies)===null||_userProfile$allergie===void 0?void 0:_userProfile$allergie.join(', '))||'None provided',\"\\n\\nPlease provide a detailed analysis in the following JSON format:\\n{\\n  \\\"recommendedCareType\\\": \\\"emergency|hospital|urgent_care|clinic|pharmacy|telehealth|home_care\\\",\\n  \\\"urgency\\\": \\\"emergency|urgent|moderate|routine\\\",\\n  \\\"confidence\\\": 0.85,\\n  \\\"reasoning\\\": \\\"Detailed explanation of the recommendation\\\",\\n  \\\"recommendations\\\": [\\\"Specific action items for the patient\\\"],\\n  \\\"symptoms_analysis\\\": {\\n    \\\"primary_symptoms\\\": [\\\"key symptoms\\\"],\\n    \\\"severity_assessment\\\": \\\"assessment details\\\",\\n    \\\"potential_conditions\\\": [\\\"possible conditions\\\"],\\n    \\\"red_flags\\\": [\\\"warning signs if any\\\"]\\n  },\\n  \\\"next_steps\\\": [\\\"immediate actions to take\\\"],\\n  \\\"when_to_seek_emergency_care\\\": [\\\"specific emergency warning signs\\\"],\\n  \\\"estimated_wait_time\\\": \\\"15-30 minutes\\\",\\n  \\\"cost_considerations\\\": \\\"Information about expected costs\\\"\\n}\\n\\nIMPORTANT: Always err on the side of caution. If there are any concerning symptoms, recommend higher-level care.\\n\");}/**\n   * Parse healthcare response from Databricks\n   */parseHealthcareResponse(response){try{// Extract content from Databricks response format\nlet content='';if(response.choices&&response.choices[0]&&response.choices[0].message){content=response.choices[0].message.content;}else if(response.response){content=response.response;}else{throw new Error('Unexpected response format from Databricks');}// Try to parse JSON from the content\nconst jsonMatch=content.match(/\\{[\\s\\S]*\\}/);if(jsonMatch){const parsed=JSON.parse(jsonMatch[0]);// Validate required fields and provide defaults\nreturn{recommendedCareType:parsed.recommendedCareType||'clinic',urgency:parsed.urgency||'moderate',confidence:parsed.confidence||0.7,reasoning:parsed.reasoning||'Analysis completed',recommendations:parsed.recommendations||['Consult with a healthcare provider'],symptoms_analysis:parsed.symptoms_analysis||{primary_symptoms:[],severity_assessment:'Requires evaluation',potential_conditions:[],red_flags:[]},next_steps:parsed.next_steps||['Schedule an appointment'],when_to_seek_emergency_care:parsed.when_to_seek_emergency_care||['Severe symptoms develop'],estimated_wait_time:parsed.estimated_wait_time,cost_considerations:parsed.cost_considerations};}else{// Fallback for non-JSON responses\nreturn this.createFallbackRecommendation(content);}}catch(error){console.error('Failed to parse healthcare response:',error);throw new Error('Invalid response format from healthcare AI');}}/**\n   * Parse provider recommendations response\n   */parseProviderRecommendations(response){try{let content='';if(response.choices&&response.choices[0]&&response.choices[0].message){content=response.choices[0].message.content;}else if(response.response){content=response.response;}const jsonMatch=content.match(/\\{[\\s\\S]*\\}/);if(jsonMatch){return JSON.parse(jsonMatch[0]);}// Fallback\nreturn{recommended_types:['clinic'],search_keywords:['healthcare'],urgency_level:'routine',additional_info:'Consult with a healthcare provider'};}catch(error){console.error('Failed to parse provider recommendations:',error);throw error;}}/**\n   * Parse travel health response\n   */parseTravelHealthResponse(response){try{let content='';if(response.choices&&response.choices[0]&&response.choices[0].message){content=response.choices[0].message.content;}else if(response.response){content=response.response;}const jsonMatch=content.match(/\\{[\\s\\S]*\\}/);if(jsonMatch){return JSON.parse(jsonMatch[0]);}// Fallback\nreturn{vaccinations:[],medications:[],healthcare_facilities:[],travel_tips:['Consult with a travel medicine specialist'],emergency_contacts:[]};}catch(error){console.error('Failed to parse travel health response:',error);throw error;}}/**\n   * Create fallback recommendation for non-JSON responses\n   */createFallbackRecommendation(content){// Analyze content for urgency keywords\nconst urgentKeywords=['emergency','urgent','immediate','serious','severe'];const isUrgent=urgentKeywords.some(keyword=>content.toLowerCase().includes(keyword));return{recommendedCareType:isUrgent?'urgent_care':'clinic',urgency:isUrgent?'urgent':'moderate',confidence:0.6,reasoning:'AI analysis completed. Recommendation based on symptom assessment.',recommendations:[content||'Consult with a healthcare provider for proper evaluation'],symptoms_analysis:{primary_symptoms:[],severity_assessment:'Requires professional evaluation',potential_conditions:[],red_flags:[]},next_steps:['Schedule an appointment with an appropriate healthcare provider'],when_to_seek_emergency_care:['If symptoms worsen significantly','If you experience severe pain or difficulty breathing'],estimated_wait_time:isUrgent?'30-60 minutes':'1-2 hours',cost_considerations:'Varies by provider and insurance coverage'};}/**\n   * Get service status and configuration\n   */getStatus(){return{configured:!!(this.config.token&&this.config.workspace&&this.config.agentEndpoint),workspace:this.config.workspace,endpoint:this.config.agentEndpoint,hasToken:!!this.config.token};}}_DatabricksService=DatabricksService;DatabricksService.instance=void 0;export default DatabricksService.getInstance();","map":{"version":3,"names":["DatabricksService","constructor","config","baseUrl","token","process","env","REACT_APP_DATABRICKS_TOKEN","workspace","REACT_APP_DATABRICKS_WORKSPACE","agentEndpoint","REACT_APP_DATABRICKS_AGENT_ENDPOINT","concat","getInstance","instance","testConnection","console","log","length","response","makeRequest","messages","role","content","choices","error","analyzeSymptoms","request","prompt","buildSymptomAnalysisPrompt","max_tokens","temperature","parseHealthcareResponse","Error","getProviderRecommendations","condition","location","urgency","arguments","undefined","city","state","parseProviderRecommendations","getTravelHealthAdvice","destination","healthConditions","travelDuration","join","parseTravelHealthResponse","payload","JSON","stringify","substring","headers","fetch","method","body","status","Object","fromEntries","entries","ok","errorText","text","jsonResponse","json","_userProfile$medicalH","_userProfile$chronicC","_userProfile$medicati","_userProfile$allergie","symptoms","severity","duration","description","userProfile","age","gender","medicalHistory","chronicConditions","medications","allergies","message","jsonMatch","match","parsed","parse","recommendedCareType","confidence","reasoning","recommendations","symptoms_analysis","primary_symptoms","severity_assessment","potential_conditions","red_flags","next_steps","when_to_seek_emergency_care","estimated_wait_time","cost_considerations","createFallbackRecommendation","recommended_types","search_keywords","urgency_level","additional_info","vaccinations","healthcare_facilities","travel_tips","emergency_contacts","urgentKeywords","isUrgent","some","keyword","toLowerCase","includes","getStatus","configured","endpoint","hasToken","_DatabricksService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/databricksService.ts"],"sourcesContent":["import { Location } from './locationService';\nimport { HealthcareProvider } from './placesService';\n\nexport interface SymptomRequest {\n  symptoms: string[];\n  severity: 'mild' | 'moderate' | 'severe' | 'emergency';\n  duration: string;\n  description: string;\n  location: Location;\n  userProfile?: {\n    age?: number;\n    gender?: string;\n    medicalHistory?: string[];\n    allergies?: string[];\n    medications?: string[];\n    chronicConditions?: string[];\n  };\n}\n\nexport interface HealthcareRecommendation {\n  recommendedCareType: 'emergency' | 'hospital' | 'urgent_care' | 'clinic' | 'pharmacy' | 'telehealth' | 'home_care';\n  urgency: 'emergency' | 'urgent' | 'moderate' | 'routine';\n  confidence: number; // 0-1 scale\n  reasoning: string;\n  recommendations: string[];\n  symptoms_analysis: {\n    primary_symptoms: string[];\n    severity_assessment: string;\n    potential_conditions: string[];\n    red_flags: string[];\n  };\n  next_steps: string[];\n  when_to_seek_emergency_care: string[];\n  estimated_wait_time?: string;\n  cost_considerations?: string;\n}\n\nexport interface DatabricksConfig {\n  token: string;\n  workspace: string;\n  agentEndpoint: string;\n}\n\nclass DatabricksService {\n  private static instance: DatabricksService;\n  private config: DatabricksConfig;\n  private baseUrl: string;\n\n  private constructor() {\n    this.config = {\n      token: process.env.REACT_APP_DATABRICKS_TOKEN || '',\n      workspace: process.env.REACT_APP_DATABRICKS_WORKSPACE || '',\n      agentEndpoint: process.env.REACT_APP_DATABRICKS_AGENT_ENDPOINT || ''\n    };\n    \n    this.baseUrl = `https://${this.config.workspace}/serving-endpoints/${this.config.agentEndpoint}/invocations`;\n  }\n\n  public static getInstance(): DatabricksService {\n    if (!DatabricksService.instance) {\n      DatabricksService.instance = new DatabricksService();\n    }\n    return DatabricksService.instance;\n  }\n\n  /**\n   * Test connection to Databricks endpoint\n   */\n  public async testConnection(): Promise<boolean> {\n    try {\n      console.log('Testing connection to:', this.baseUrl);\n      console.log('With token:', this.config.token ? 'Present (length: ' + this.config.token.length + ')' : 'Missing');\n      \n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'user',\n            content: 'Hello, are you working?'\n          }\n        ]\n      });\n      \n      console.log('Connection test response:', response);\n      return response.choices && response.choices.length > 0;\n    } catch (error) {\n      console.error('Databricks connection test failed:', error);\n      console.error('URL attempted:', this.baseUrl);\n      return false;\n    }\n  }\n\n  /**\n   * Analyze symptoms and get healthcare recommendations\n   */\n  public async analyzeSymptoms(request: SymptomRequest): Promise<HealthcareRecommendation> {\n    try {\n      const prompt = this.buildSymptomAnalysisPrompt(request);\n      \n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a healthcare AI assistant that analyzes symptoms and provides healthcare recommendations. Always prioritize patient safety and recommend seeking emergency care when appropriate. Provide structured JSON responses.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 1000,\n        temperature: 0.3\n      });\n\n      return this.parseHealthcareResponse(response);\n    } catch (error) {\n      console.error('Symptom analysis failed:', error);\n      throw new Error(`Failed to analyze symptoms: ${error}`);\n    }\n  }\n\n  /**\n   * Get healthcare provider recommendations based on condition/specialty\n   */\n  public async getProviderRecommendations(\n    condition: string,\n    location: Location,\n    urgency: 'emergency' | 'urgent' | 'routine' = 'routine'\n  ): Promise<{\n    recommended_types: string[];\n    search_keywords: string[];\n    urgency_level: string;\n    additional_info: string;\n  }> {\n    try {\n      const prompt = `\nBased on the medical condition \"${condition}\" and urgency level \"${urgency}\", recommend:\n1. Most appropriate healthcare provider types\n2. Search keywords for finding providers\n3. Any specific considerations\n\nLocation: ${location.city}, ${location.state}\n\nRespond in JSON format:\n{\n  \"recommended_types\": [\"hospital\", \"urgent_care\", \"clinic\", \"specialist\"],\n  \"search_keywords\": [\"cardiology\", \"emergency\", \"urgent care\"],\n  \"urgency_level\": \"urgent\",\n  \"additional_info\": \"Patient should seek immediate care...\"\n}\n`;\n\n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a healthcare navigation AI that helps patients find appropriate care providers based on their condition and location.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 500,\n        temperature: 0.2\n      });\n\n      return this.parseProviderRecommendations(response);\n    } catch (error) {\n      console.error('Provider recommendations failed:', error);\n      throw new Error(`Failed to get provider recommendations: ${error}`);\n    }\n  }\n\n  /**\n   * Get travel health recommendations\n   */\n  public async getTravelHealthAdvice(\n    destination: string,\n    healthConditions: string[],\n    travelDuration: string\n  ): Promise<{\n    vaccinations: string[];\n    medications: string[];\n    healthcare_facilities: string[];\n    travel_tips: string[];\n    emergency_contacts: string[];\n  }> {\n    try {\n      const prompt = `\nProvide travel health advice for:\n- Destination: ${destination}\n- Health conditions: ${healthConditions.join(', ')}\n- Travel duration: ${travelDuration}\n\nInclude vaccinations, medications, healthcare facilities to research, and travel tips.\n\nRespond in JSON format with arrays for each category.\n`;\n\n      const response = await this.makeRequest({\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a travel medicine specialist AI providing health advice for international travelers.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 800,\n        temperature: 0.3\n      });\n\n      return this.parseTravelHealthResponse(response);\n    } catch (error) {\n      console.error('Travel health advice failed:', error);\n      throw new Error(`Failed to get travel health advice: ${error}`);\n    }\n  }\n\n  /**\n   * Make authenticated request to Databricks endpoint\n   */\n  private async makeRequest(payload: any): Promise<any> {\n    if (!this.config.token || !this.config.workspace) {\n      throw new Error('Databricks configuration is incomplete. Check environment variables.');\n    }\n\n    console.log('Making request to URL:', this.baseUrl);\n    console.log('Request payload:', JSON.stringify(payload, null, 2));\n    console.log('Token length:', this.config.token.length);\n    console.log('Token starts with:', this.config.token.substring(0, 10) + '...');\n    console.log('Authorization header:', `Bearer ${this.config.token.substring(0, 10)}...`);\n\n    const headers = {\n      'Authorization': `Bearer ${this.config.token}`,\n      'Content-Type': 'application/json',\n    };\n\n    console.log('Request headers:', headers);\n\n    const response = await fetch(this.baseUrl, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(payload)\n    });\n\n    console.log('Response status:', response.status);\n    console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Error response body:', errorText);\n      throw new Error(`Databricks API error (${response.status}): ${errorText}`);\n    }\n\n    const jsonResponse = await response.json();\n    console.log('Success response:', jsonResponse);\n    return jsonResponse;\n  }\n\n  /**\n   * Build detailed prompt for symptom analysis\n   */\n  private buildSymptomAnalysisPrompt(request: SymptomRequest): string {\n    const { symptoms, severity, duration, description, location, userProfile } = request;\n\n    return `\nAnalyze these symptoms and provide healthcare recommendations:\n\nSYMPTOMS: ${symptoms.join(', ')}\nSEVERITY: ${severity}\nDURATION: ${duration}\nDESCRIPTION: ${description}\n\nPATIENT CONTEXT:\n- Location: ${location.city || 'Unknown'}, ${location.state || 'Unknown'}\n- Age: ${userProfile?.age || 'Not specified'}\n- Gender: ${userProfile?.gender || 'Not specified'}\n- Medical History: ${userProfile?.medicalHistory?.join(', ') || 'None provided'}\n- Chronic Conditions: ${userProfile?.chronicConditions?.join(', ') || 'None provided'}\n- Current Medications: ${userProfile?.medications?.join(', ') || 'None provided'}\n- Allergies: ${userProfile?.allergies?.join(', ') || 'None provided'}\n\nPlease provide a detailed analysis in the following JSON format:\n{\n  \"recommendedCareType\": \"emergency|hospital|urgent_care|clinic|pharmacy|telehealth|home_care\",\n  \"urgency\": \"emergency|urgent|moderate|routine\",\n  \"confidence\": 0.85,\n  \"reasoning\": \"Detailed explanation of the recommendation\",\n  \"recommendations\": [\"Specific action items for the patient\"],\n  \"symptoms_analysis\": {\n    \"primary_symptoms\": [\"key symptoms\"],\n    \"severity_assessment\": \"assessment details\",\n    \"potential_conditions\": [\"possible conditions\"],\n    \"red_flags\": [\"warning signs if any\"]\n  },\n  \"next_steps\": [\"immediate actions to take\"],\n  \"when_to_seek_emergency_care\": [\"specific emergency warning signs\"],\n  \"estimated_wait_time\": \"15-30 minutes\",\n  \"cost_considerations\": \"Information about expected costs\"\n}\n\nIMPORTANT: Always err on the side of caution. If there are any concerning symptoms, recommend higher-level care.\n`;\n  }\n\n  /**\n   * Parse healthcare response from Databricks\n   */\n  private parseHealthcareResponse(response: any): HealthcareRecommendation {\n    try {\n      // Extract content from Databricks response format\n      let content = '';\n      if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      } else {\n        throw new Error('Unexpected response format from Databricks');\n      }\n\n      // Try to parse JSON from the content\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0]);\n        \n        // Validate required fields and provide defaults\n        return {\n          recommendedCareType: parsed.recommendedCareType || 'clinic',\n          urgency: parsed.urgency || 'moderate',\n          confidence: parsed.confidence || 0.7,\n          reasoning: parsed.reasoning || 'Analysis completed',\n          recommendations: parsed.recommendations || ['Consult with a healthcare provider'],\n          symptoms_analysis: parsed.symptoms_analysis || {\n            primary_symptoms: [],\n            severity_assessment: 'Requires evaluation',\n            potential_conditions: [],\n            red_flags: []\n          },\n          next_steps: parsed.next_steps || ['Schedule an appointment'],\n          when_to_seek_emergency_care: parsed.when_to_seek_emergency_care || ['Severe symptoms develop'],\n          estimated_wait_time: parsed.estimated_wait_time,\n          cost_considerations: parsed.cost_considerations\n        };\n      } else {\n        // Fallback for non-JSON responses\n        return this.createFallbackRecommendation(content);\n      }\n    } catch (error) {\n      console.error('Failed to parse healthcare response:', error);\n      throw new Error('Invalid response format from healthcare AI');\n    }\n  }\n\n  /**\n   * Parse provider recommendations response\n   */\n  private parseProviderRecommendations(response: any): any {\n    try {\n      let content = '';\n      if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      }\n\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback\n      return {\n        recommended_types: ['clinic'],\n        search_keywords: ['healthcare'],\n        urgency_level: 'routine',\n        additional_info: 'Consult with a healthcare provider'\n      };\n    } catch (error) {\n      console.error('Failed to parse provider recommendations:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Parse travel health response\n   */\n  private parseTravelHealthResponse(response: any): any {\n    try {\n      let content = '';\n      if (response.choices && response.choices[0] && response.choices[0].message) {\n        content = response.choices[0].message.content;\n      } else if (response.response) {\n        content = response.response;\n      }\n\n      const jsonMatch = content.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        return JSON.parse(jsonMatch[0]);\n      }\n\n      // Fallback\n      return {\n        vaccinations: [],\n        medications: [],\n        healthcare_facilities: [],\n        travel_tips: ['Consult with a travel medicine specialist'],\n        emergency_contacts: []\n      };\n    } catch (error) {\n      console.error('Failed to parse travel health response:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create fallback recommendation for non-JSON responses\n   */\n  private createFallbackRecommendation(content: string): HealthcareRecommendation {\n    // Analyze content for urgency keywords\n    const urgentKeywords = ['emergency', 'urgent', 'immediate', 'serious', 'severe'];\n    const isUrgent = urgentKeywords.some(keyword => \n      content.toLowerCase().includes(keyword)\n    );\n\n    return {\n      recommendedCareType: isUrgent ? 'urgent_care' : 'clinic',\n      urgency: isUrgent ? 'urgent' : 'moderate',\n      confidence: 0.6,\n      reasoning: 'AI analysis completed. Recommendation based on symptom assessment.',\n      recommendations: [content || 'Consult with a healthcare provider for proper evaluation'],\n      symptoms_analysis: {\n        primary_symptoms: [],\n        severity_assessment: 'Requires professional evaluation',\n        potential_conditions: [],\n        red_flags: []\n      },\n      next_steps: ['Schedule an appointment with an appropriate healthcare provider'],\n      when_to_seek_emergency_care: ['If symptoms worsen significantly', 'If you experience severe pain or difficulty breathing'],\n      estimated_wait_time: isUrgent ? '30-60 minutes' : '1-2 hours',\n      cost_considerations: 'Varies by provider and insurance coverage'\n    };\n  }\n\n  /**\n   * Get service status and configuration\n   */\n  public getStatus(): {\n    configured: boolean;\n    workspace: string;\n    endpoint: string;\n    hasToken: boolean;\n  } {\n    return {\n      configured: !!(this.config.token && this.config.workspace && this.config.agentEndpoint),\n      workspace: this.config.workspace,\n      endpoint: this.config.agentEndpoint,\n      hasToken: !!this.config.token\n    };\n  }\n}\n\nexport default DatabricksService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}