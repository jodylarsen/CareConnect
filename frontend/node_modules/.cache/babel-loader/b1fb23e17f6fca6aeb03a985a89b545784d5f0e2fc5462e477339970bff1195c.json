{"ast":null,"code":"var _jsxFileName = \"/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/components/MapView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './MapView.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapView = ({\n  userLocation,\n  providers = [],\n  onLocationChange,\n  onProviderSelect\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [userMarker, setUserMarker] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  useEffect(() => {\n    // Add a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      initializeMap();\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (map && userLocation) {\n      updateUserLocation(userLocation);\n    }\n  }, [map, userLocation]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (map) {\n      updateProviderMarkers(providers);\n    }\n  }, [map, providers]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const initializeMap = async () => {\n    try {\n      const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n      console.log('Initializing map with API key:', apiKey ? 'Present' : 'Missing');\n      console.log('Map ref current:', mapRef.current ? 'Available' : 'Not available');\n      if (!apiKey) {\n        throw new Error('Google Maps API key is missing. Please check your .env file.');\n      }\n      if (!mapRef.current) {\n        if (retryCount < 10) {\n          console.log(`Map container not ready, waiting... (attempt ${retryCount + 1}/10)`);\n          setRetryCount(prev => prev + 1);\n          setTimeout(initializeMap, 100);\n          return;\n        } else {\n          throw new Error('Map container failed to initialize after 10 attempts');\n        }\n      }\n\n      // Check if Google Maps is already loaded\n      if (window.google && window.google.maps) {\n        console.log('Google Maps already loaded, creating map...');\n        createMapInstance();\n        return;\n      }\n\n      // Load Google Maps script directly (same as working test)\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        console.log('Google Maps script loaded successfully');\n        // Add a small delay to ensure everything is ready\n        setTimeout(createMapInstance, 100);\n      };\n      script.onerror = () => {\n        throw new Error('Failed to load Google Maps script');\n      };\n\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (!existingScript) {\n        document.head.appendChild(script);\n        console.log('Loading Google Maps script...');\n      } else {\n        console.log('Google Maps script already in DOM');\n        if (window.google && window.google.maps) {\n          setTimeout(createMapInstance, 100);\n        }\n      }\n    } catch (err) {\n      console.error('Map initialization error:', err);\n      setError(`Failed to initialize map: ${err}`);\n      setLoading(false);\n    }\n  };\n  const createMapInstance = () => {\n    try {\n      if (!mapRef.current) {\n        console.error('Map container ref not found in createMapInstance');\n        setError('Map container not found');\n        setLoading(false);\n        return;\n      }\n\n      // Default to New York if no user location\n      const defaultLocation = userLocation || {\n        lat: 40.7128,\n        lng: -74.0060\n      };\n      console.log('Creating map at location:', defaultLocation);\n      const mapInstance = new google.maps.Map(mapRef.current, {\n        center: defaultLocation,\n        zoom: 13,\n        styles: [{\n          featureType: 'poi.medical',\n          elementType: 'geometry',\n          stylers: [{\n            color: '#ffeaa7'\n          }]\n        }]\n      });\n\n      // Add click listener for location selection\n      mapInstance.addListener('click', event => {\n        if (event.latLng && onLocationChange) {\n          const location = {\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          };\n\n          // Reverse geocode to get address\n          const geocoder = new google.maps.Geocoder();\n          geocoder.geocode({\n            location: event.latLng\n          }, (results, status) => {\n            if (status === 'OK' && results && results[0]) {\n              location.address = results[0].formatted_address;\n            }\n            onLocationChange(location);\n          });\n        }\n      });\n      console.log('Map instance created successfully');\n      setMap(mapInstance);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error creating map instance:', err);\n      setError(`Failed to create map: ${err}`);\n      setLoading(false);\n    }\n  };\n  const updateUserLocation = location => {\n    if (!map) return;\n\n    // Remove existing user marker\n    if (userMarker) {\n      userMarker.setMap(null);\n    }\n\n    // Create new user marker\n    const marker = new google.maps.Marker({\n      position: location,\n      map: map,\n      title: 'Your Location',\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"8\" fill=\"#007bff\" stroke=\"white\" stroke-width=\"2\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"white\"/>\n          </svg>\n        `),\n        scaledSize: new google.maps.Size(24, 24),\n        anchor: new google.maps.Point(12, 12)\n      }\n    });\n    setUserMarker(marker);\n\n    // Center map on user location\n    map.setCenter(location);\n  };\n  const updateProviderMarkers = providers => {\n    if (!map) return;\n\n    // Clear existing markers\n    markers.forEach(marker => marker.setMap(null));\n\n    // Create new markers\n    const newMarkers = providers.map((provider, index) => {\n      const marker = new google.maps.Marker({\n        position: provider.location,\n        map: map,\n        title: provider.name,\n        icon: {\n          url: getProviderIcon(provider.type),\n          scaledSize: new google.maps.Size(32, 32),\n          anchor: new google.maps.Point(16, 32)\n        }\n      });\n\n      // Create info window\n      const infoWindow = new google.maps.InfoWindow({\n        content: `\n          <div class=\"marker-info\">\n            <h3>${provider.name}</h3>\n            <p><strong>Type:</strong> ${provider.type}</p>\n            <p><strong>Address:</strong> ${provider.address}</p>\n            ${provider.rating ? `<p><strong>Rating:</strong> ${'‚≠ê'.repeat(Math.round(provider.rating))}</p>` : ''}\n            ${provider.distance ? `<p><strong>Distance:</strong> ${provider.distance.toFixed(1)} miles</p>` : ''}\n            <button onclick=\"window.selectProvider('${provider.placeId || provider.id}')\" class=\"select-btn\">\n              Select Provider\n            </button>\n          </div>\n        `\n      });\n      marker.addListener('click', () => {\n        infoWindow.open(map, marker);\n      });\n      return marker;\n    });\n    setMarkers(newMarkers);\n\n    // Set up global function for provider selection\n    window.selectProvider = providerId => {\n      const provider = providers.find(p => p.placeId === providerId || p.id === providerId);\n      if (provider && onProviderSelect) {\n        onProviderSelect(provider);\n      }\n    };\n\n    // Adjust map bounds to show all markers\n    if (newMarkers.length > 0) {\n      const bounds = new google.maps.LatLngBounds();\n      newMarkers.forEach(marker => {\n        const position = marker.getPosition();\n        if (position) bounds.extend(position);\n      });\n      if (userMarker) {\n        const userPosition = userMarker.getPosition();\n        if (userPosition) bounds.extend(userPosition);\n      }\n      map.fitBounds(bounds);\n    }\n  };\n  const getProviderIcon = type => {\n    const iconColor = getProviderColor(type);\n    return `data:image/svg+xml;charset=UTF-8,` + encodeURIComponent(`\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16 2C10.48 2 6 6.48 6 12C6 20 16 30 16 30S26 20 26 12C26 6.48 21.52 2 16 2Z\" fill=\"${iconColor}\" stroke=\"white\" stroke-width=\"2\"/>\n        <circle cx=\"16\" cy=\"12\" r=\"4\" fill=\"white\"/>\n        <text x=\"16\" y=\"16\" text-anchor=\"middle\" fill=\"${iconColor}\" font-size=\"8\" font-weight=\"bold\">${getProviderSymbol(type)}</text>\n      </svg>\n    `);\n  };\n  const getProviderColor = type => {\n    switch (type.toLowerCase()) {\n      case 'hospital':\n        return '#dc3545';\n      case 'urgent_care':\n        return '#fd7e14';\n      case 'pharmacy':\n        return '#28a745';\n      case 'clinic':\n        return '#007bff';\n      case 'specialist':\n        return '#6f42c1';\n      default:\n        return '#6c757d';\n    }\n  };\n  const getProviderSymbol = type => {\n    switch (type.toLowerCase()) {\n      case 'hospital':\n        return 'H';\n      case 'urgent_care':\n        return 'U';\n      case 'pharmacy':\n        return 'P';\n      case 'clinic':\n        return 'C';\n      case 'specialist':\n        return 'S';\n      default:\n        return 'M';\n    }\n  };\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const location = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        if (onLocationChange) {\n          onLocationChange(location);\n        }\n      }, error => {\n        setError(`Geolocation error: ${error.message}`);\n      }, {\n        timeout: 10000,\n        enableHighAccuracy: true\n      });\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error loading map: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"location-btn\",\n        onClick: getCurrentLocation,\n        title: \"Get current location\",\n        children: \"\\uD83D\\uDCCD Current Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-legend\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: '#007bff'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), \"Your Location\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: '#dc3545'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), \"Hospital\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: '#fd7e14'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 13\n          }, this), \"Urgent Care\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"legend-color\",\n            style: {\n              backgroundColor: '#28a745'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), \"Pharmacy\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      className: \"map-display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"nbiLo9prbSMR+sfy3ggoiSd86WE=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","MapView","userLocation","providers","onLocationChange","onProviderSelect","_s","mapRef","map","setMap","markers","setMarkers","userMarker","setUserMarker","loading","setLoading","error","setError","retryCount","setRetryCount","timer","setTimeout","initializeMap","clearTimeout","updateUserLocation","updateProviderMarkers","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","console","log","current","Error","prev","window","google","maps","createMapInstance","script","document","createElement","src","async","defer","onload","onerror","existingScript","querySelector","head","appendChild","err","defaultLocation","lat","lng","mapInstance","Map","center","zoom","styles","featureType","elementType","stylers","color","addListener","event","latLng","location","geocoder","Geocoder","geocode","results","status","address","formatted_address","marker","Marker","position","title","icon","url","encodeURIComponent","scaledSize","Size","anchor","Point","setCenter","forEach","newMarkers","provider","index","name","getProviderIcon","type","infoWindow","InfoWindow","content","rating","repeat","Math","round","distance","toFixed","placeId","id","open","selectProvider","providerId","find","p","length","bounds","LatLngBounds","getPosition","extend","userPosition","fitBounds","iconColor","getProviderColor","getProviderSymbol","toLowerCase","getCurrentLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","message","timeout","enableHighAccuracy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","reload","style","backgroundColor","ref","_c","$RefreshReg$"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/components/MapView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Location } from '../services/locationService';\nimport { HealthcareProvider } from '../services/placesService';\nimport './MapView.css';\n\ninterface MapViewProps {\n  userLocation?: Location | null;\n  providers?: HealthcareProvider[];\n  onLocationChange?: (location: Location) => void;\n  onProviderSelect?: (provider: HealthcareProvider) => void;\n}\n\nconst MapView: React.FC<MapViewProps> = ({\n  userLocation,\n  providers = [],\n  onLocationChange,\n  onProviderSelect\n}) => {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [markers, setMarkers] = useState<google.maps.Marker[]>([]);\n  const [userMarker, setUserMarker] = useState<google.maps.Marker | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  useEffect(() => {\n    // Add a small delay to ensure the component is fully mounted\n    const timer = setTimeout(() => {\n      initializeMap();\n    }, 100);\n    \n    return () => clearTimeout(timer);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (map && userLocation) {\n      updateUserLocation(userLocation);\n    }\n  }, [map, userLocation]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    if (map) {\n      updateProviderMarkers(providers);\n    }\n  }, [map, providers]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const initializeMap = async () => {\n    try {\n      const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n      console.log('Initializing map with API key:', apiKey ? 'Present' : 'Missing');\n      console.log('Map ref current:', mapRef.current ? 'Available' : 'Not available');\n      \n      if (!apiKey) {\n        throw new Error('Google Maps API key is missing. Please check your .env file.');\n      }\n\n      if (!mapRef.current) {\n        if (retryCount < 10) {\n          console.log(`Map container not ready, waiting... (attempt ${retryCount + 1}/10)`);\n          setRetryCount(prev => prev + 1);\n          setTimeout(initializeMap, 100);\n          return;\n        } else {\n          throw new Error('Map container failed to initialize after 10 attempts');\n        }\n      }\n\n      // Check if Google Maps is already loaded\n      if (window.google && window.google.maps) {\n        console.log('Google Maps already loaded, creating map...');\n        createMapInstance();\n        return;\n      }\n\n      // Load Google Maps script directly (same as working test)\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n\n      script.onload = () => {\n        console.log('Google Maps script loaded successfully');\n        // Add a small delay to ensure everything is ready\n        setTimeout(createMapInstance, 100);\n      };\n\n      script.onerror = () => {\n        throw new Error('Failed to load Google Maps script');\n      };\n\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (!existingScript) {\n        document.head.appendChild(script);\n        console.log('Loading Google Maps script...');\n      } else {\n        console.log('Google Maps script already in DOM');\n        if (window.google && window.google.maps) {\n          setTimeout(createMapInstance, 100);\n        }\n      }\n    } catch (err) {\n      console.error('Map initialization error:', err);\n      setError(`Failed to initialize map: ${err}`);\n      setLoading(false);\n    }\n  };\n\n  const createMapInstance = () => {\n    try {\n      if (!mapRef.current) {\n        console.error('Map container ref not found in createMapInstance');\n        setError('Map container not found');\n        setLoading(false);\n        return;\n      }\n\n      // Default to New York if no user location\n      const defaultLocation = userLocation || { lat: 40.7128, lng: -74.0060 };\n      console.log('Creating map at location:', defaultLocation);\n\n      const mapInstance = new google.maps.Map(mapRef.current, {\n        center: defaultLocation,\n        zoom: 13,\n        styles: [\n          {\n            featureType: 'poi.medical',\n            elementType: 'geometry',\n            stylers: [{ color: '#ffeaa7' }]\n          }\n        ]\n      });\n\n      // Add click listener for location selection\n      mapInstance.addListener('click', (event: google.maps.MapMouseEvent) => {\n        if (event.latLng && onLocationChange) {\n          const location: Location = {\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          };\n          \n          // Reverse geocode to get address\n          const geocoder = new google.maps.Geocoder();\n          geocoder.geocode({ location: event.latLng }, (results, status) => {\n            if (status === 'OK' && results && results[0]) {\n              location.address = results[0].formatted_address;\n            }\n            onLocationChange(location);\n          });\n        }\n      });\n\n      console.log('Map instance created successfully');\n      setMap(mapInstance);\n      setLoading(false);\n    } catch (err) {\n      console.error('Error creating map instance:', err);\n      setError(`Failed to create map: ${err}`);\n      setLoading(false);\n    }\n  };\n\n  const updateUserLocation = (location: Location) => {\n    if (!map) return;\n\n    // Remove existing user marker\n    if (userMarker) {\n      userMarker.setMap(null);\n    }\n\n    // Create new user marker\n    const marker = new google.maps.Marker({\n      position: location,\n      map: map,\n      title: 'Your Location',\n      icon: {\n        url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <circle cx=\"12\" cy=\"12\" r=\"8\" fill=\"#007bff\" stroke=\"white\" stroke-width=\"2\"/>\n            <circle cx=\"12\" cy=\"12\" r=\"3\" fill=\"white\"/>\n          </svg>\n        `),\n        scaledSize: new google.maps.Size(24, 24),\n        anchor: new google.maps.Point(12, 12)\n      }\n    });\n\n    setUserMarker(marker);\n\n    // Center map on user location\n    map.setCenter(location);\n  };\n\n  const updateProviderMarkers = (providers: HealthcareProvider[]) => {\n    if (!map) return;\n\n    // Clear existing markers\n    markers.forEach(marker => marker.setMap(null));\n\n    // Create new markers\n    const newMarkers = providers.map((provider, index) => {\n      const marker = new google.maps.Marker({\n        position: provider.location,\n        map: map,\n        title: provider.name,\n        icon: {\n          url: getProviderIcon(provider.type),\n          scaledSize: new google.maps.Size(32, 32),\n          anchor: new google.maps.Point(16, 32)\n        }\n      });\n\n      // Create info window\n      const infoWindow = new google.maps.InfoWindow({\n        content: `\n          <div class=\"marker-info\">\n            <h3>${provider.name}</h3>\n            <p><strong>Type:</strong> ${provider.type}</p>\n            <p><strong>Address:</strong> ${provider.address}</p>\n            ${provider.rating ? `<p><strong>Rating:</strong> ${'‚≠ê'.repeat(Math.round(provider.rating))}</p>` : ''}\n            ${provider.distance ? `<p><strong>Distance:</strong> ${provider.distance.toFixed(1)} miles</p>` : ''}\n            <button onclick=\"window.selectProvider('${provider.placeId || provider.id}')\" class=\"select-btn\">\n              Select Provider\n            </button>\n          </div>\n        `\n      });\n\n      marker.addListener('click', () => {\n        infoWindow.open(map, marker);\n      });\n\n      return marker;\n    });\n\n    setMarkers(newMarkers);\n\n    // Set up global function for provider selection\n    (window as any).selectProvider = (providerId: string) => {\n      const provider = providers.find(p => p.placeId === providerId || p.id === providerId);\n      if (provider && onProviderSelect) {\n        onProviderSelect(provider);\n      }\n    };\n\n    // Adjust map bounds to show all markers\n    if (newMarkers.length > 0) {\n      const bounds = new google.maps.LatLngBounds();\n      newMarkers.forEach(marker => {\n        const position = marker.getPosition();\n        if (position) bounds.extend(position);\n      });\n      \n      if (userMarker) {\n        const userPosition = userMarker.getPosition();\n        if (userPosition) bounds.extend(userPosition);\n      }\n\n      map.fitBounds(bounds);\n    }\n  };\n\n  const getProviderIcon = (type: string): string => {\n    const iconColor = getProviderColor(type);\n    return `data:image/svg+xml;charset=UTF-8,` + encodeURIComponent(`\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M16 2C10.48 2 6 6.48 6 12C6 20 16 30 16 30S26 20 26 12C26 6.48 21.52 2 16 2Z\" fill=\"${iconColor}\" stroke=\"white\" stroke-width=\"2\"/>\n        <circle cx=\"16\" cy=\"12\" r=\"4\" fill=\"white\"/>\n        <text x=\"16\" y=\"16\" text-anchor=\"middle\" fill=\"${iconColor}\" font-size=\"8\" font-weight=\"bold\">${getProviderSymbol(type)}</text>\n      </svg>\n    `);\n  };\n\n  const getProviderColor = (type: string): string => {\n    switch (type.toLowerCase()) {\n      case 'hospital': return '#dc3545';\n      case 'urgent_care': return '#fd7e14';\n      case 'pharmacy': return '#28a745';\n      case 'clinic': return '#007bff';\n      case 'specialist': return '#6f42c1';\n      default: return '#6c757d';\n    }\n  };\n\n  const getProviderSymbol = (type: string): string => {\n    switch (type.toLowerCase()) {\n      case 'hospital': return 'H';\n      case 'urgent_care': return 'U';\n      case 'pharmacy': return 'P';\n      case 'clinic': return 'C';\n      case 'specialist': return 'S';\n      default: return 'M';\n    }\n  };\n\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const location: Location = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n          \n          if (onLocationChange) {\n            onLocationChange(location);\n          }\n        },\n        (error) => {\n          setError(`Geolocation error: ${error.message}`);\n        },\n        { timeout: 10000, enableHighAccuracy: true }\n      );\n    } else {\n      setError('Geolocation is not supported by this browser');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"map-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading map...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"map-error\">\n        <p>Error loading map: {error}</p>\n        <button onClick={() => window.location.reload()}>\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div className=\"map-controls\">\n        <button \n          className=\"location-btn\"\n          onClick={getCurrentLocation}\n          title=\"Get current location\"\n        >\n          üìç Current Location\n        </button>\n        <div className=\"map-legend\">\n          <span className=\"legend-item\">\n            <span className=\"legend-color\" style={{backgroundColor: '#007bff'}}></span>\n            Your Location\n          </span>\n          <span className=\"legend-item\">\n            <span className=\"legend-color\" style={{backgroundColor: '#dc3545'}}></span>\n            Hospital\n          </span>\n          <span className=\"legend-item\">\n            <span className=\"legend-color\" style={{backgroundColor: '#fd7e14'}}></span>\n            Urgent Care\n          </span>\n          <span className=\"legend-item\">\n            <span className=\"legend-color\" style={{backgroundColor: '#28a745'}}></span>\n            Pharmacy\n          </span>\n        </div>\n      </div>\n      <div ref={mapRef} className=\"map-display\" />\n    </div>\n  );\n};\n\nexport default MapView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}