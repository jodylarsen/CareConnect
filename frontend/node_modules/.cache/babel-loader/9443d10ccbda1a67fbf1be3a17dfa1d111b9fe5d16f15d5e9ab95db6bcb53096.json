{"ast":null,"code":"var _PlacesService;\nimport { GOOGLE_MAPS_CONFIG } from '../config/google';\nclass PlacesService {\n  constructor() {\n    this.isInitialized = false;\n  }\n  static getInstance() {\n    if (!PlacesService.instance) {\n      PlacesService.instance = new PlacesService();\n    }\n    return PlacesService.instance;\n  }\n\n  /**\n   * Initialize Google Places service\n   */\n  async initialize() {\n    if (this.isInitialized) return;\n    try {\n      var _window$google, _window$google$maps;\n      if (!((_window$google = window.google) !== null && _window$google !== void 0 && (_window$google$maps = _window$google.maps) !== null && _window$google$maps !== void 0 && _window$google$maps.places)) {\n        // Load Google Maps script directly\n        await this.loadGoogleMapsScript();\n      }\n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize Google Places:', error);\n      throw new Error('Google Places initialization failed');\n    }\n  }\n  async loadGoogleMapsScript() {\n    return new Promise((resolve, reject) => {\n      var _window$google2, _window$google2$maps;\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (existingScript && (_window$google2 = window.google) !== null && _window$google2 !== void 0 && (_window$google2$maps = _window$google2.maps) !== null && _window$google2$maps !== void 0 && _window$google2$maps.places) {\n        resolve();\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_CONFIG.API_KEY}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Google Maps script'));\n      if (!existingScript) {\n        document.head.appendChild(script);\n      }\n    });\n  }\n\n  /**\n   * Search for healthcare providers near a location\n   */\n  async searchNearbyProviders(location, filters = {}) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    if (!this.placesService) {\n      throw new Error('Places service not initialized');\n    }\n    const {\n      type = 'all',\n      radius = 5000,\n      minRating = 0,\n      isOpen,\n      keyword\n    } = filters;\n    return new Promise((resolve, reject) => {\n      if (!this.placesService) {\n        reject(new Error('Places service not available'));\n        return;\n      }\n      const request = {\n        location: new google.maps.LatLng(location.lat, location.lng),\n        radius,\n        type: this.getGooglePlaceType(type),\n        ...(keyword && {\n          keyword\n        }),\n        ...(isOpen !== undefined && {\n          openNow: isOpen\n        })\n      };\n      this.placesService.nearbySearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n          const providers = results.filter(place => !minRating || place.rating && place.rating >= minRating).map(place => this.convertToHealthcareProvider(place, location)).filter(provider => provider.type !== 'health' || type === 'all'); // Filter generic health places unless specifically requested\n\n          resolve(providers);\n        } else {\n          reject(new Error(`Places search failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Search for healthcare providers by text query\n   */\n  async searchByText(query, location, radius = 10000) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    if (!this.placesService) {\n      throw new Error('Places service not initialized');\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.placesService) {\n        reject(new Error('Places service not available'));\n        return;\n      }\n      const request = {\n        query,\n        ...(location && {\n          location: new google.maps.LatLng(location.lat, location.lng),\n          radius\n        })\n      };\n      this.placesService.textSearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n          const providers = results.map(place => this.convertToHealthcareProvider(place, location));\n          resolve(providers);\n        } else {\n          reject(new Error(`Text search failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Get detailed information about a specific place\n   */\n  async getPlaceDetails(placeId) {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n    if (!this.placesService) {\n      throw new Error('Places service not initialized');\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.placesService) {\n        reject(new Error('Places service not available'));\n        return;\n      }\n      const request = {\n        placeId,\n        fields: ['place_id', 'name', 'formatted_address', 'geometry', 'rating', 'user_ratings_total', 'price_level', 'formatted_phone_number', 'website', 'opening_hours', 'photos', 'reviews', 'business_status', 'types', 'utc_offset_minutes']\n      };\n      this.placesService.getDetails(request, (place, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK && place) {\n          const details = this.convertToPlaceDetails(place);\n          resolve(details);\n        } else {\n          reject(new Error(`Place details failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Find healthcare providers by specialty\n   */\n  async findSpecialists(specialty, location, radius = 10000) {\n    const specialtyQueries = this.getSpecialtyQueries(specialty);\n    const allResults = [];\n    for (const query of specialtyQueries) {\n      try {\n        const results = await this.searchByText(`${query} near ${location.address || `${location.lat},${location.lng}`}`, location, radius);\n        allResults.push(...results);\n      } catch (error) {\n        console.warn(`Search failed for ${query}:`, error);\n      }\n    }\n\n    // Remove duplicates based on place ID\n    const uniqueResults = allResults.filter((provider, index, self) => index === self.findIndex(p => p.placeId === provider.placeId));\n    return uniqueResults;\n  }\n\n  /**\n   * Get provider photos\n   */\n  getPhotoUrl(photoReference, maxWidth = 400, maxHeight) {\n    const params = new URLSearchParams({\n      photoreference: photoReference,\n      key: GOOGLE_MAPS_CONFIG.API_KEY,\n      maxwidth: maxWidth.toString(),\n      ...(maxHeight && {\n        maxheight: maxHeight.toString()\n      })\n    });\n    return `https://maps.googleapis.com/maps/api/place/photo?${params.toString()}`;\n  }\n  convertToHealthcareProvider(place, userLocation) {\n    var _place$geometry, _place$geometry$locat, _place$geometry2, _place$geometry2$loca;\n    const location = {\n      lat: ((_place$geometry = place.geometry) === null || _place$geometry === void 0 ? void 0 : (_place$geometry$locat = _place$geometry.location) === null || _place$geometry$locat === void 0 ? void 0 : _place$geometry$locat.lat()) || 0,\n      lng: ((_place$geometry2 = place.geometry) === null || _place$geometry2 === void 0 ? void 0 : (_place$geometry2$loca = _place$geometry2.location) === null || _place$geometry2$loca === void 0 ? void 0 : _place$geometry2$loca.lng()) || 0\n    };\n    const provider = {\n      id: place.place_id || `place_${Date.now()}_${Math.random()}`,\n      placeId: place.place_id || '',\n      name: place.name || 'Unknown Provider',\n      address: place.vicinity || place.formatted_address || 'Address not available',\n      location,\n      type: this.determineProviderType(place.types || []),\n      rating: place.rating,\n      totalRatings: place.user_ratings_total,\n      priceLevel: place.price_level,\n      businessStatus: place.business_status,\n      ...(place.photos && place.photos.length > 0 && {\n        photos: place.photos.slice(0, 5).map(photo => this.getPhotoUrl(photo.photo_reference))\n      })\n    };\n\n    // Calculate distance if user location is provided\n    if (userLocation) {\n      provider.distance = this.calculateDistance(userLocation, location);\n    }\n    return provider;\n  }\n  convertToPlaceDetails(place) {\n    var _place$opening_hours$, _place$opening_hours, _place$geometry3;\n    const baseProvider = this.convertToHealthcareProvider(place);\n    const details = {\n      ...baseProvider,\n      phone: place.formatted_phone_number,\n      website: place.website,\n      utcOffset: place.utc_offset_minutes,\n      ...(place.opening_hours && {\n        hours: {\n          isOpen: ((_place$opening_hours$ = (_place$opening_hours = place.opening_hours).isOpen) === null || _place$opening_hours$ === void 0 ? void 0 : _place$opening_hours$.call(_place$opening_hours)) || false,\n          periods: (place.opening_hours.periods || []).map(period => {\n            var _period$open, _period$open2, _period$close, _period$close2;\n            return {\n              open: {\n                day: ((_period$open = period.open) === null || _period$open === void 0 ? void 0 : _period$open.day) || 0,\n                time: ((_period$open2 = period.open) === null || _period$open2 === void 0 ? void 0 : _period$open2.time) || '0000'\n              },\n              close: {\n                day: ((_period$close = period.close) === null || _period$close === void 0 ? void 0 : _period$close.day) || 0,\n                time: ((_period$close2 = period.close) === null || _period$close2 === void 0 ? void 0 : _period$close2.time) || '2359'\n              }\n            };\n          })\n        }\n      }),\n      ...(place.reviews && {\n        reviews: place.reviews.map(review => ({\n          author: review.author_name,\n          rating: review.rating,\n          text: review.text,\n          time: review.time\n        }))\n      }),\n      ...(((_place$geometry3 = place.geometry) === null || _place$geometry3 === void 0 ? void 0 : _place$geometry3.viewport) && {\n        geometry: {\n          viewport: {\n            northeast: {\n              lat: place.geometry.viewport.getNorthEast().lat(),\n              lng: place.geometry.viewport.getNorthEast().lng()\n            },\n            southwest: {\n              lat: place.geometry.viewport.getSouthWest().lat(),\n              lng: place.geometry.viewport.getSouthWest().lng()\n            }\n          }\n        }\n      })\n    };\n    return details;\n  }\n  getGooglePlaceType(type) {\n    switch (type) {\n      case 'hospital':\n        return 'hospital';\n      case 'pharmacy':\n        return 'pharmacy';\n      case 'dentist':\n        return 'dentist';\n      case 'veterinarian':\n        return 'veterinary_care';\n      case 'doctor':\n      case 'clinic':\n      case 'urgent_care':\n        return 'doctor';\n      case 'physiotherapist':\n        return 'physiotherapist';\n      default:\n        return 'health';\n    }\n  }\n  determineProviderType(types) {\n    if (types.includes('hospital')) return 'hospital';\n    if (types.includes('pharmacy')) return 'pharmacy';\n    if (types.includes('dentist')) return 'dentist';\n    if (types.includes('veterinary_care')) return 'veterinarian';\n    if (types.includes('physiotherapist')) return 'physiotherapist';\n    if (types.includes('doctor')) return 'doctor';\n    if (types.includes('health')) return 'health';\n\n    // Try to determine from name patterns\n    const name = types.join(' ').toLowerCase();\n    if (name.includes('urgent') || name.includes('emergency')) return 'urgent_care';\n    if (name.includes('clinic')) return 'clinic';\n    return 'health';\n  }\n  getSpecialtyQueries(specialty) {\n    const specialtyMap = {\n      'cardiology': ['cardiologist', 'heart doctor', 'cardiac specialist'],\n      'dermatology': ['dermatologist', 'skin doctor'],\n      'neurology': ['neurologist', 'brain doctor'],\n      'orthopedics': ['orthopedist', 'bone doctor', 'sports medicine'],\n      'psychiatry': ['psychiatrist', 'mental health'],\n      'pediatrics': ['pediatrician', 'children doctor'],\n      'gynecology': ['gynecologist', 'womens health'],\n      'ophthalmology': ['eye doctor', 'ophthalmologist'],\n      'urology': ['urologist'],\n      'oncology': ['oncologist', 'cancer doctor'],\n      'endocrinology': ['endocrinologist', 'diabetes doctor'],\n      'gastroenterology': ['gastroenterologist', 'stomach doctor'],\n      'nephrology': ['nephrologist', 'kidney doctor'],\n      'pulmonology': ['pulmonologist', 'lung doctor'],\n      'rheumatology': ['rheumatologist', 'arthritis doctor'],\n      'allergy': ['allergist', 'allergy doctor'],\n      'dialysis': ['dialysis center', 'kidney dialysis', 'hemodialysis'],\n      'sti': ['sexual health clinic', 'std testing', 'reproductive health'],\n      'covid': ['covid testing', 'coronavirus testing', 'urgent care']\n    };\n    const lowerSpecialty = specialty.toLowerCase();\n    return specialtyMap[lowerSpecialty] || [specialty];\n  }\n  calculateDistance(from, to) {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(to.lat - from.lat);\n    const dLng = this.toRadians(to.lng - from.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(from.lat)) * Math.cos(this.toRadians(to.lat)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n}\n_PlacesService = PlacesService;\nPlacesService.instance = void 0;\nexport default PlacesService.getInstance();","map":{"version":3,"names":["GOOGLE_MAPS_CONFIG","PlacesService","constructor","isInitialized","getInstance","instance","initialize","_window$google","_window$google$maps","window","google","maps","places","loadGoogleMapsScript","error","console","Error","Promise","resolve","reject","_window$google2","_window$google2$maps","existingScript","document","querySelector","script","createElement","src","API_KEY","async","defer","onload","onerror","head","appendChild","searchNearbyProviders","location","filters","placesService","type","radius","minRating","isOpen","keyword","request","LatLng","lat","lng","getGooglePlaceType","undefined","openNow","nearbySearch","results","status","PlacesServiceStatus","OK","providers","filter","place","rating","map","convertToHealthcareProvider","provider","searchByText","query","textSearch","getPlaceDetails","placeId","fields","getDetails","details","convertToPlaceDetails","findSpecialists","specialty","specialtyQueries","getSpecialtyQueries","allResults","address","push","warn","uniqueResults","index","self","findIndex","p","getPhotoUrl","photoReference","maxWidth","maxHeight","params","URLSearchParams","photoreference","key","maxwidth","toString","maxheight","userLocation","_place$geometry","_place$geometry$locat","_place$geometry2","_place$geometry2$loca","geometry","id","place_id","Date","now","Math","random","name","vicinity","formatted_address","determineProviderType","types","totalRatings","user_ratings_total","priceLevel","price_level","businessStatus","business_status","photos","length","slice","photo","photo_reference","distance","calculateDistance","_place$opening_hours$","_place$opening_hours","_place$geometry3","baseProvider","phone","formatted_phone_number","website","utcOffset","utc_offset_minutes","opening_hours","hours","call","periods","period","_period$open","_period$open2","_period$close","_period$close2","open","day","time","close","reviews","review","author","author_name","text","viewport","northeast","getNorthEast","southwest","getSouthWest","includes","join","toLowerCase","specialtyMap","lowerSpecialty","from","to","R","dLat","toRadians","dLng","a","sin","cos","c","atan2","sqrt","degrees","PI","_PlacesService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/placesService.ts"],"sourcesContent":["import { GOOGLE_MAPS_CONFIG } from '../config/google';\nimport { Location } from './locationService';\n\nexport interface HealthcareProvider {\n  id: string;\n  name: string;\n  address: string;\n  location: Location;\n  type: ProviderType;\n  rating?: number;\n  totalRatings?: number;\n  priceLevel?: number;\n  phone?: string;\n  website?: string;\n  hours?: {\n    isOpen: boolean;\n    periods: Array<{\n      open: { day: number; time: string };\n      close: { day: number; time: string };\n    }>;\n  };\n  photos?: string[];\n  distance?: number;\n  placeId: string;\n  businessStatus?: 'OPERATIONAL' | 'CLOSED_TEMPORARILY' | 'CLOSED_PERMANENTLY';\n}\n\nexport type ProviderType = \n  | 'hospital' \n  | 'urgent_care' \n  | 'clinic' \n  | 'pharmacy' \n  | 'dentist' \n  | 'veterinarian'\n  | 'physiotherapist'\n  | 'doctor'\n  | 'health';\n\nexport interface SearchFilters {\n  type?: ProviderType | 'all';\n  radius?: number; // in meters\n  minRating?: number;\n  priceLevel?: number[];\n  isOpen?: boolean;\n  keyword?: string;\n}\n\nexport interface PlaceDetails extends HealthcareProvider {\n  reviews?: Array<{\n    author: string;\n    rating: number;\n    text: string;\n    time: number;\n  }>;\n  geometry?: {\n    viewport: {\n      northeast: { lat: number; lng: number };\n      southwest: { lat: number; lng: number };\n    };\n  };\n  utcOffset?: number;\n  services?: string[];\n  accessibility?: {\n    wheelchairAccessible?: boolean;\n  };\n}\n\nclass PlacesService {\n  private static instance: PlacesService;\n  private isInitialized = false;\n\n  private constructor() {}\n\n  public static getInstance(): PlacesService {\n    if (!PlacesService.instance) {\n      PlacesService.instance = new PlacesService();\n    }\n    return PlacesService.instance;\n  }\n\n  /**\n   * Initialize Google Places service\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      if (!window.google?.maps?.places) {\n        // Load Google Maps script directly\n        await this.loadGoogleMapsScript();\n      }\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize Google Places:', error);\n      throw new Error('Google Places initialization failed');\n    }\n  }\n\n  private async loadGoogleMapsScript(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (existingScript && window.google?.maps?.places) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_CONFIG.API_KEY}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Google Maps script'));\n\n      if (!existingScript) {\n        document.head.appendChild(script);\n      }\n    });\n  }\n\n  /**\n   * Search for healthcare providers near a location\n   */\n  public async searchNearbyProviders(\n    location: Location,\n    filters: SearchFilters = {}\n  ): Promise<HealthcareProvider[]> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (!this.placesService) {\n      throw new Error('Places service not initialized');\n    }\n\n    const {\n      type = 'all',\n      radius = 5000,\n      minRating = 0,\n      isOpen,\n      keyword\n    } = filters;\n\n    return new Promise((resolve, reject) => {\n      if (!this.placesService) {\n        reject(new Error('Places service not available'));\n        return;\n      }\n\n      const request: google.maps.places.PlaceSearchRequest = {\n        location: new google.maps.LatLng(location.lat, location.lng),\n        radius,\n        type: this.getGooglePlaceType(type),\n        ...(keyword && { keyword }),\n        ...(isOpen !== undefined && { openNow: isOpen })\n      };\n\n      this.placesService.nearbySearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n          const providers = results\n            .filter(place => !minRating || (place.rating && place.rating >= minRating))\n            .map(place => this.convertToHealthcareProvider(place, location))\n            .filter(provider => provider.type !== 'health' || type === 'all'); // Filter generic health places unless specifically requested\n\n          resolve(providers);\n        } else {\n          reject(new Error(`Places search failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Search for healthcare providers by text query\n   */\n  public async searchByText(\n    query: string,\n    location?: Location,\n    radius: number = 10000\n  ): Promise<HealthcareProvider[]> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (!this.placesService) {\n      throw new Error('Places service not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.placesService) {\n        reject(new Error('Places service not available'));\n        return;\n      }\n\n      const request: google.maps.places.TextSearchRequest = {\n        query,\n        ...(location && {\n          location: new google.maps.LatLng(location.lat, location.lng),\n          radius\n        })\n      };\n\n      this.placesService.textSearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n          const providers = results.map(place => \n            this.convertToHealthcareProvider(place, location)\n          );\n          resolve(providers);\n        } else {\n          reject(new Error(`Text search failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Get detailed information about a specific place\n   */\n  public async getPlaceDetails(placeId: string): Promise<PlaceDetails> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    if (!this.placesService) {\n      throw new Error('Places service not initialized');\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.placesService) {\n        reject(new Error('Places service not available'));\n        return;\n      }\n\n      const request: google.maps.places.PlaceDetailsRequest = {\n        placeId,\n        fields: [\n          'place_id',\n          'name',\n          'formatted_address',\n          'geometry',\n          'rating',\n          'user_ratings_total',\n          'price_level',\n          'formatted_phone_number',\n          'website',\n          'opening_hours',\n          'photos',\n          'reviews',\n          'business_status',\n          'types',\n          'utc_offset_minutes'\n        ]\n      };\n\n      this.placesService.getDetails(request, (place, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK && place) {\n          const details = this.convertToPlaceDetails(place);\n          resolve(details);\n        } else {\n          reject(new Error(`Place details failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Find healthcare providers by specialty\n   */\n  public async findSpecialists(\n    specialty: string,\n    location: Location,\n    radius: number = 10000\n  ): Promise<HealthcareProvider[]> {\n    const specialtyQueries = this.getSpecialtyQueries(specialty);\n    const allResults: HealthcareProvider[] = [];\n\n    for (const query of specialtyQueries) {\n      try {\n        const results = await this.searchByText(\n          `${query} near ${location.address || `${location.lat},${location.lng}`}`,\n          location,\n          radius\n        );\n        allResults.push(...results);\n      } catch (error) {\n        console.warn(`Search failed for ${query}:`, error);\n      }\n    }\n\n    // Remove duplicates based on place ID\n    const uniqueResults = allResults.filter((provider, index, self) => \n      index === self.findIndex(p => p.placeId === provider.placeId)\n    );\n\n    return uniqueResults;\n  }\n\n  /**\n   * Get provider photos\n   */\n  public getPhotoUrl(\n    photoReference: string, \n    maxWidth: number = 400, \n    maxHeight?: number\n  ): string {\n    const params = new URLSearchParams({\n      photoreference: photoReference,\n      key: GOOGLE_MAPS_CONFIG.API_KEY,\n      maxwidth: maxWidth.toString(),\n      ...(maxHeight && { maxheight: maxHeight.toString() })\n    });\n\n    return `https://maps.googleapis.com/maps/api/place/photo?${params.toString()}`;\n  }\n\n  private convertToHealthcareProvider(\n    place: google.maps.places.PlaceResult,\n    userLocation?: Location\n  ): HealthcareProvider {\n    const location: Location = {\n      lat: place.geometry?.location?.lat() || 0,\n      lng: place.geometry?.location?.lng() || 0\n    };\n\n    const provider: HealthcareProvider = {\n      id: place.place_id || `place_${Date.now()}_${Math.random()}`,\n      placeId: place.place_id || '',\n      name: place.name || 'Unknown Provider',\n      address: place.vicinity || place.formatted_address || 'Address not available',\n      location,\n      type: this.determineProviderType(place.types || []),\n      rating: place.rating,\n      totalRatings: place.user_ratings_total,\n      priceLevel: place.price_level,\n      businessStatus: (place as any).business_status,\n      ...(place.photos && place.photos.length > 0 && {\n        photos: place.photos.slice(0, 5).map(photo => \n          this.getPhotoUrl((photo as any).photo_reference)\n        )\n      })\n    };\n\n    // Calculate distance if user location is provided\n    if (userLocation) {\n      provider.distance = this.calculateDistance(userLocation, location);\n    }\n\n    return provider;\n  }\n\n  private convertToPlaceDetails(place: google.maps.places.PlaceResult): PlaceDetails {\n    const baseProvider = this.convertToHealthcareProvider(place);\n    \n    const details: PlaceDetails = {\n      ...baseProvider,\n      phone: place.formatted_phone_number,\n      website: place.website,\n      utcOffset: place.utc_offset_minutes,\n      ...(place.opening_hours && {\n        hours: {\n          isOpen: place.opening_hours.isOpen?.() || false,\n          periods: (place.opening_hours.periods || []).map(period => ({\n            open: {\n              day: period.open?.day || 0,\n              time: period.open?.time || '0000'\n            },\n            close: {\n              day: period.close?.day || 0,\n              time: period.close?.time || '2359'\n            }\n          }))\n        }\n      }),\n      ...(place.reviews && {\n        reviews: place.reviews.map(review => ({\n          author: review.author_name,\n          rating: review.rating,\n          text: review.text,\n          time: review.time\n        }))\n      }),\n      ...(place.geometry?.viewport && {\n        geometry: {\n          viewport: {\n            northeast: {\n              lat: place.geometry.viewport.getNorthEast().lat(),\n              lng: place.geometry.viewport.getNorthEast().lng()\n            },\n            southwest: {\n              lat: place.geometry.viewport.getSouthWest().lat(),\n              lng: place.geometry.viewport.getSouthWest().lng()\n            }\n          }\n        }\n      })\n    };\n\n    return details;\n  }\n\n  private getGooglePlaceType(type: ProviderType | 'all'): string {\n    switch (type) {\n      case 'hospital':\n        return 'hospital';\n      case 'pharmacy':\n        return 'pharmacy';\n      case 'dentist':\n        return 'dentist';\n      case 'veterinarian':\n        return 'veterinary_care';\n      case 'doctor':\n      case 'clinic':\n      case 'urgent_care':\n        return 'doctor';\n      case 'physiotherapist':\n        return 'physiotherapist';\n      default:\n        return 'health';\n    }\n  }\n\n  private determineProviderType(types: string[]): ProviderType {\n    if (types.includes('hospital')) return 'hospital';\n    if (types.includes('pharmacy')) return 'pharmacy';\n    if (types.includes('dentist')) return 'dentist';\n    if (types.includes('veterinary_care')) return 'veterinarian';\n    if (types.includes('physiotherapist')) return 'physiotherapist';\n    if (types.includes('doctor')) return 'doctor';\n    if (types.includes('health')) return 'health';\n    \n    // Try to determine from name patterns\n    const name = types.join(' ').toLowerCase();\n    if (name.includes('urgent') || name.includes('emergency')) return 'urgent_care';\n    if (name.includes('clinic')) return 'clinic';\n    \n    return 'health';\n  }\n\n  private getSpecialtyQueries(specialty: string): string[] {\n    const specialtyMap: Record<string, string[]> = {\n      'cardiology': ['cardiologist', 'heart doctor', 'cardiac specialist'],\n      'dermatology': ['dermatologist', 'skin doctor'],\n      'neurology': ['neurologist', 'brain doctor'],\n      'orthopedics': ['orthopedist', 'bone doctor', 'sports medicine'],\n      'psychiatry': ['psychiatrist', 'mental health'],\n      'pediatrics': ['pediatrician', 'children doctor'],\n      'gynecology': ['gynecologist', 'womens health'],\n      'ophthalmology': ['eye doctor', 'ophthalmologist'],\n      'urology': ['urologist'],\n      'oncology': ['oncologist', 'cancer doctor'],\n      'endocrinology': ['endocrinologist', 'diabetes doctor'],\n      'gastroenterology': ['gastroenterologist', 'stomach doctor'],\n      'nephrology': ['nephrologist', 'kidney doctor'],\n      'pulmonology': ['pulmonologist', 'lung doctor'],\n      'rheumatology': ['rheumatologist', 'arthritis doctor'],\n      'allergy': ['allergist', 'allergy doctor'],\n      'dialysis': ['dialysis center', 'kidney dialysis', 'hemodialysis'],\n      'sti': ['sexual health clinic', 'std testing', 'reproductive health'],\n      'covid': ['covid testing', 'coronavirus testing', 'urgent care']\n    };\n\n    const lowerSpecialty = specialty.toLowerCase();\n    return specialtyMap[lowerSpecialty] || [specialty];\n  }\n\n  private calculateDistance(from: Location, to: Location): number {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(to.lat - from.lat);\n    const dLng = this.toRadians(to.lng - from.lng);\n    \n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(from.lat)) * Math.cos(this.toRadians(to.lat)) *\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}\n\nexport default PlacesService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}