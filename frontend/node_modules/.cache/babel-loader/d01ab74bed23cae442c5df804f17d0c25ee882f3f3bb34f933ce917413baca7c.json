{"ast":null,"code":"var _AuthService;import{GOOGLE_CONFIG,GOOGLE_OAUTH_URLS}from'../config/google';class AuthService{constructor(){this.user=null;this.tokens=null;// Check for existing session on initialization\nthis.loadStoredAuth();}static getInstance(){if(!AuthService.instance){AuthService.instance=new AuthService();}return AuthService.instance;}/**\n   * Initiate Google OAuth 2.0 login flow\n   */login(){const params=new URLSearchParams({client_id:GOOGLE_CONFIG.CLIENT_ID,redirect_uri:GOOGLE_CONFIG.REDIRECT_URI,response_type:GOOGLE_CONFIG.RESPONSE_TYPE,scope:GOOGLE_CONFIG.SCOPES.join(' '),access_type:GOOGLE_CONFIG.ACCESS_TYPE,prompt:GOOGLE_CONFIG.PROMPT,state:this.generateState()});// Store state for validation\nsessionStorage.setItem('oauth_state',params.get('state')||'');// Redirect to Google OAuth\nwindow.location.href=\"\".concat(GOOGLE_OAUTH_URLS.AUTHORIZATION,\"?\").concat(params.toString());}/**\n   * Handle OAuth callback with authorization code\n   */async handleCallback(code,state){// Validate state parameter\nconst storedState=sessionStorage.getItem('oauth_state');if(state!==storedState){throw new Error('Invalid state parameter');}try{// Exchange authorization code for tokens\nconst tokens=await this.exchangeCodeForTokens(code);this.tokens=tokens;// Get user information\nconst user=await this.getUserInfo(tokens.access_token);this.user=user;// Store in session storage\nthis.storeAuth(user,tokens);// Clean up\nsessionStorage.removeItem('oauth_state');return user;}catch(error){console.error('OAuth callback error:',error);throw new Error('Authentication failed');}}/**\n   * Exchange authorization code for access tokens\n   */async exchangeCodeForTokens(code){const response=await fetch(GOOGLE_OAUTH_URLS.TOKEN,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({client_id:GOOGLE_CONFIG.CLIENT_ID,client_secret:process.env.REACT_APP_GOOGLE_CLIENT_SECRET||'',code,grant_type:'authorization_code',redirect_uri:GOOGLE_CONFIG.REDIRECT_URI})});if(!response.ok){throw new Error('Failed to exchange code for tokens');}return response.json();}/**\n   * Get user information from Google API\n   */async getUserInfo(accessToken){const response=await fetch(GOOGLE_OAUTH_URLS.USER_INFO,{headers:{Authorization:\"Bearer \".concat(accessToken)}});if(!response.ok){throw new Error('Failed to get user information');}return response.json();}/**\n   * Logout user and clear session\n   */logout(){this.user=null;this.tokens=null;sessionStorage.removeItem('careconnect_user');sessionStorage.removeItem('careconnect_tokens');sessionStorage.removeItem('oauth_state');}/**\n   * Get current user\n   */getCurrentUser(){return this.user;}/**\n   * Check if user is authenticated\n   */isAuthenticated(){return this.user!==null&&this.tokens!==null;}/**\n   * Get access token for API calls\n   */getAccessToken(){var _this$tokens;return((_this$tokens=this.tokens)===null||_this$tokens===void 0?void 0:_this$tokens.access_token)||null;}/**\n   * Generate random state for OAuth security\n   */generateState(){return Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);}/**\n   * Store authentication data in session storage\n   */storeAuth(user,tokens){sessionStorage.setItem('careconnect_user',JSON.stringify(user));sessionStorage.setItem('careconnect_tokens',JSON.stringify(tokens));}/**\n   * Load stored authentication data\n   */loadStoredAuth(){try{const storedUser=sessionStorage.getItem('careconnect_user');const storedTokens=sessionStorage.getItem('careconnect_tokens');if(storedUser&&storedTokens){this.user=JSON.parse(storedUser);this.tokens=JSON.parse(storedTokens);// TODO: Validate token expiration and refresh if needed\n}}catch(error){console.error('Error loading stored auth:',error);// Clear invalid stored data\nthis.logout();}}}_AuthService=AuthService;AuthService.instance=void 0;export default AuthService.getInstance();","map":{"version":3,"names":["GOOGLE_CONFIG","GOOGLE_OAUTH_URLS","AuthService","constructor","user","tokens","loadStoredAuth","getInstance","instance","login","params","URLSearchParams","client_id","CLIENT_ID","redirect_uri","REDIRECT_URI","response_type","RESPONSE_TYPE","scope","SCOPES","join","access_type","ACCESS_TYPE","prompt","PROMPT","state","generateState","sessionStorage","setItem","get","window","location","href","concat","AUTHORIZATION","toString","handleCallback","code","storedState","getItem","Error","exchangeCodeForTokens","getUserInfo","access_token","storeAuth","removeItem","error","console","response","fetch","TOKEN","method","headers","body","client_secret","process","env","REACT_APP_GOOGLE_CLIENT_SECRET","grant_type","ok","json","accessToken","USER_INFO","Authorization","logout","getCurrentUser","isAuthenticated","getAccessToken","_this$tokens","Math","random","substring","JSON","stringify","storedUser","storedTokens","parse","_AuthService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/auth.ts"],"sourcesContent":["import { GOOGLE_CONFIG, GOOGLE_OAUTH_URLS } from '../config/google';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  picture: string;\n  verified_email: boolean;\n}\n\nexport interface AuthTokens {\n  access_token: string;\n  refresh_token?: string;\n  id_token?: string;\n  token_type: string;\n  expires_in: number;\n}\n\nclass AuthService {\n  private static instance: AuthService;\n  private user: User | null = null;\n  private tokens: AuthTokens | null = null;\n\n  private constructor() {\n    // Check for existing session on initialization\n    this.loadStoredAuth();\n  }\n\n  public static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  /**\n   * Initiate Google OAuth 2.0 login flow\n   */\n  public login(): void {\n    const params = new URLSearchParams({\n      client_id: GOOGLE_CONFIG.CLIENT_ID,\n      redirect_uri: GOOGLE_CONFIG.REDIRECT_URI,\n      response_type: GOOGLE_CONFIG.RESPONSE_TYPE,\n      scope: GOOGLE_CONFIG.SCOPES.join(' '),\n      access_type: GOOGLE_CONFIG.ACCESS_TYPE,\n      prompt: GOOGLE_CONFIG.PROMPT,\n      state: this.generateState()\n    });\n\n    // Store state for validation\n    sessionStorage.setItem('oauth_state', params.get('state') || '');\n    \n    // Redirect to Google OAuth\n    window.location.href = `${GOOGLE_OAUTH_URLS.AUTHORIZATION}?${params.toString()}`;\n  }\n\n  /**\n   * Handle OAuth callback with authorization code\n   */\n  public async handleCallback(code: string, state: string): Promise<User> {\n    // Validate state parameter\n    const storedState = sessionStorage.getItem('oauth_state');\n    if (state !== storedState) {\n      throw new Error('Invalid state parameter');\n    }\n\n    try {\n      // Exchange authorization code for tokens\n      const tokens = await this.exchangeCodeForTokens(code);\n      this.tokens = tokens;\n\n      // Get user information\n      const user = await this.getUserInfo(tokens.access_token);\n      this.user = user;\n\n      // Store in session storage\n      this.storeAuth(user, tokens);\n\n      // Clean up\n      sessionStorage.removeItem('oauth_state');\n\n      return user;\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      throw new Error('Authentication failed');\n    }\n  }\n\n  /**\n   * Exchange authorization code for access tokens\n   */\n  private async exchangeCodeForTokens(code: string): Promise<AuthTokens> {\n    const response = await fetch(GOOGLE_OAUTH_URLS.TOKEN, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: GOOGLE_CONFIG.CLIENT_ID,\n        client_secret: process.env.REACT_APP_GOOGLE_CLIENT_SECRET || '',\n        code,\n        grant_type: 'authorization_code',\n        redirect_uri: GOOGLE_CONFIG.REDIRECT_URI,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to exchange code for tokens');\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Get user information from Google API\n   */\n  private async getUserInfo(accessToken: string): Promise<User> {\n    const response = await fetch(GOOGLE_OAUTH_URLS.USER_INFO, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to get user information');\n    }\n\n    return response.json();\n  }\n\n  /**\n   * Logout user and clear session\n   */\n  public logout(): void {\n    this.user = null;\n    this.tokens = null;\n    sessionStorage.removeItem('careconnect_user');\n    sessionStorage.removeItem('careconnect_tokens');\n    sessionStorage.removeItem('oauth_state');\n  }\n\n  /**\n   * Get current user\n   */\n  public getCurrentUser(): User | null {\n    return this.user;\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  public isAuthenticated(): boolean {\n    return this.user !== null && this.tokens !== null;\n  }\n\n  /**\n   * Get access token for API calls\n   */\n  public getAccessToken(): string | null {\n    return this.tokens?.access_token || null;\n  }\n\n  /**\n   * Generate random state for OAuth security\n   */\n  private generateState(): string {\n    return Math.random().toString(36).substring(2, 15) + \n           Math.random().toString(36).substring(2, 15);\n  }\n\n  /**\n   * Store authentication data in session storage\n   */\n  private storeAuth(user: User, tokens: AuthTokens): void {\n    sessionStorage.setItem('careconnect_user', JSON.stringify(user));\n    sessionStorage.setItem('careconnect_tokens', JSON.stringify(tokens));\n  }\n\n  /**\n   * Load stored authentication data\n   */\n  private loadStoredAuth(): void {\n    try {\n      const storedUser = sessionStorage.getItem('careconnect_user');\n      const storedTokens = sessionStorage.getItem('careconnect_tokens');\n\n      if (storedUser && storedTokens) {\n        this.user = JSON.parse(storedUser);\n        this.tokens = JSON.parse(storedTokens);\n\n        // TODO: Validate token expiration and refresh if needed\n      }\n    } catch (error) {\n      console.error('Error loading stored auth:', error);\n      // Clear invalid stored data\n      this.logout();\n    }\n  }\n}\n\nexport default AuthService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}