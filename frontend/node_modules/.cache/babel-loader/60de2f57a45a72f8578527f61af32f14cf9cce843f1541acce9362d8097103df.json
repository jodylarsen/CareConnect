{"ast":null,"code":"import _objectSpread from\"/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _PlacesService;import{GOOGLE_MAPS_CONFIG}from'../config/google';class PlacesService{constructor(){this.isInitialized=false;}static getInstance(){if(!PlacesService.instance){PlacesService.instance=new PlacesService();}return PlacesService.instance;}/**\n   * Initialize Google Places service\n   */async initialize(){if(this.isInitialized)return;try{var _window$google,_window$google$maps;if(!((_window$google=window.google)!==null&&_window$google!==void 0&&(_window$google$maps=_window$google.maps)!==null&&_window$google$maps!==void 0&&_window$google$maps.places)){// Load Google Maps script directly\nawait this.loadGoogleMapsScript();}this.isInitialized=true;}catch(error){console.error('Failed to initialize Google Places:',error);throw new Error('Google Places initialization failed');}}async loadGoogleMapsScript(){return new Promise((resolve,reject)=>{var _window$google2,_window$google2$maps;// Check if script already exists\nconst existingScript=document.querySelector('script[src*=\"maps.googleapis.com\"]');if(existingScript&&(_window$google2=window.google)!==null&&_window$google2!==void 0&&(_window$google2$maps=_window$google2.maps)!==null&&_window$google2$maps!==void 0&&_window$google2$maps.places){resolve();return;}const script=document.createElement('script');script.src=\"https://maps.googleapis.com/maps/api/js?key=\".concat(GOOGLE_MAPS_CONFIG.API_KEY,\"&libraries=places,geometry\");script.async=true;script.defer=true;script.onload=()=>resolve();script.onerror=()=>reject(new Error('Failed to load Google Maps script'));if(!existingScript){document.head.appendChild(script);}});}/**\n   * Search for healthcare providers near a location using new Places API\n   */async searchNearbyProviders(location){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!this.isInitialized){await this.initialize();}const{type='all',radius=5000,minRating=0,isOpen,keyword}=filters;try{// Use the new Places API (Place class)\nconst center=new google.maps.LatLng(location.lat,location.lng);const includedTypes=this.getNewAPIPlaceTypes(type);const request=_objectSpread(_objectSpread({fields:['id','displayName','formattedAddress','location','rating','userRatingCount','priceLevel','businessStatus','types','regularOpeningHours'],locationRestriction:{circle:{center:center,radius:radius}},includedTypes:includedTypes,maxResultCount:20},keyword&&{textQuery:keyword}),isOpen&&{openNow:true});// Use searchNearby method from new Places API\nconst{places}=await google.maps.places.Place.searchNearby(request);const providers=places.filter(place=>!minRating||place.rating&&place.rating>=minRating).map(place=>this.convertNewAPIToHealthcareProvider(place,location)).filter(provider=>provider.type!=='health'||type==='all');return providers;}catch(error){console.error('Places search failed:',error);throw new Error(\"Places search failed: \".concat(error));}}/**\n   * Search for healthcare providers by text query using new Places API\n   */async searchByText(query,location){let radius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10000;if(!this.isInitialized){await this.initialize();}try{const request=_objectSpread({textQuery:query,fields:['id','displayName','formattedAddress','location','rating','userRatingCount','priceLevel','businessStatus','types'],maxResultCount:20},location&&{locationBias:{circle:{center:new google.maps.LatLng(location.lat,location.lng),radius:radius}}});const{places}=await google.maps.places.Place.searchByText(request);const providers=places.map(place=>this.convertNewAPIToHealthcareProvider(place,location));return providers;}catch(error){console.error('Text search failed:',error);throw new Error(\"Text search failed: \".concat(error));}}/**\n   * Get detailed information about a specific place using new API\n   */async getPlaceDetails(placeId){if(!this.isInitialized){await this.initialize();}try{const place=new google.maps.places.Place({id:placeId,requestedLanguage:'en'});await place.fetchFields({fields:['id','displayName','formattedAddress','location','rating','userRatingCount','priceLevel','internationalPhoneNumber','websiteURI','regularOpeningHours','businessStatus','types']});const details=this.convertNewAPIToPlaceDetails(place);return details;}catch(error){console.error('Place details failed:',error);throw new Error(\"Place details failed: \".concat(error));}}/**\n   * Find healthcare providers by specialty\n   */async findSpecialists(specialty,location){let radius=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10000;const specialtyQueries=this.getSpecialtyQueries(specialty);const allResults=[];for(const query of specialtyQueries){try{const results=await this.searchByText(\"\".concat(query,\" near \").concat(location.address||\"\".concat(location.lat,\",\").concat(location.lng)),location,radius);allResults.push(...results);}catch(error){console.warn(\"Search failed for \".concat(query,\":\"),error);}}// Remove duplicates based on place ID\nconst uniqueResults=allResults.filter((provider,index,self)=>index===self.findIndex(p=>p.placeId===provider.placeId));return uniqueResults;}/**\n   * Get provider photos\n   */getPhotoUrl(photoReference){let maxWidth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:400;let maxHeight=arguments.length>2?arguments[2]:undefined;const params=new URLSearchParams(_objectSpread({photoreference:photoReference,key:GOOGLE_MAPS_CONFIG.API_KEY,maxwidth:maxWidth.toString()},maxHeight&&{maxheight:maxHeight.toString()}));return\"https://maps.googleapis.com/maps/api/place/photo?\".concat(params.toString());}convertNewAPIToHealthcareProvider(place,userLocation){var _place$location,_place$location2,_place$displayName;const location={lat:((_place$location=place.location)===null||_place$location===void 0?void 0:_place$location.lat())||0,lng:((_place$location2=place.location)===null||_place$location2===void 0?void 0:_place$location2.lng())||0};const provider={id:place.id||\"place_\".concat(Date.now(),\"_\").concat(Math.random()),placeId:place.id||'',name:((_place$displayName=place.displayName)===null||_place$displayName===void 0?void 0:_place$displayName.text)||'Unknown Provider',address:place.formattedAddress||'Address not available',location,type:this.determineProviderType(place.types||[]),rating:place.rating,totalRatings:place.userRatingCount,priceLevel:place.priceLevel,businessStatus:place.businessStatus};// Calculate distance if user location is provided\nif(userLocation){provider.distance=this.calculateDistance(userLocation,location);}return provider;}convertToHealthcareProvider(place,userLocation){var _place$geometry,_place$geometry$locat,_place$geometry2,_place$geometry2$loca;const location={lat:((_place$geometry=place.geometry)===null||_place$geometry===void 0?void 0:(_place$geometry$locat=_place$geometry.location)===null||_place$geometry$locat===void 0?void 0:_place$geometry$locat.lat())||0,lng:((_place$geometry2=place.geometry)===null||_place$geometry2===void 0?void 0:(_place$geometry2$loca=_place$geometry2.location)===null||_place$geometry2$loca===void 0?void 0:_place$geometry2$loca.lng())||0};const provider=_objectSpread({id:place.place_id||\"place_\".concat(Date.now(),\"_\").concat(Math.random()),placeId:place.place_id||'',name:place.name||'Unknown Provider',address:place.vicinity||place.formatted_address||'Address not available',location,type:this.determineProviderType(place.types||[]),rating:place.rating,totalRatings:place.user_ratings_total,priceLevel:place.price_level,businessStatus:place.business_status},place.photos&&place.photos.length>0&&{photos:place.photos.slice(0,5).map(photo=>this.getPhotoUrl(photo.photo_reference))});// Calculate distance if user location is provided\nif(userLocation){provider.distance=this.calculateDistance(userLocation,location);}return provider;}convertNewAPIToPlaceDetails(place){const baseProvider=this.convertNewAPIToHealthcareProvider(place);const details=_objectSpread(_objectSpread({},baseProvider),{},{phone:place.internationalPhoneNumber,website:place.websiteURI},place.regularOpeningHours&&{hours:{isOpen:place.regularOpeningHours.periods?place.regularOpeningHours.periods.length>0:false,periods:(place.regularOpeningHours.periods||[]).map(period=>{var _period$open,_period$open2,_period$close,_period$close2;return{open:{day:((_period$open=period.open)===null||_period$open===void 0?void 0:_period$open.day)||0,time:((_period$open2=period.open)===null||_period$open2===void 0?void 0:_period$open2.time)||'0000'},close:{day:((_period$close=period.close)===null||_period$close===void 0?void 0:_period$close.day)||0,time:((_period$close2=period.close)===null||_period$close2===void 0?void 0:_period$close2.time)||'2359'}};})}});return details;}convertToPlaceDetails(place){var _place$opening_hours$,_place$opening_hours,_place$geometry3;const baseProvider=this.convertToHealthcareProvider(place);const details=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},baseProvider),{},{phone:place.formatted_phone_number,website:place.website,utcOffset:place.utc_offset_minutes},place.opening_hours&&{hours:{isOpen:((_place$opening_hours$=(_place$opening_hours=place.opening_hours).isOpen)===null||_place$opening_hours$===void 0?void 0:_place$opening_hours$.call(_place$opening_hours))||false,periods:(place.opening_hours.periods||[]).map(period=>{var _period$open3,_period$open4,_period$close3,_period$close4;return{open:{day:((_period$open3=period.open)===null||_period$open3===void 0?void 0:_period$open3.day)||0,time:((_period$open4=period.open)===null||_period$open4===void 0?void 0:_period$open4.time)||'0000'},close:{day:((_period$close3=period.close)===null||_period$close3===void 0?void 0:_period$close3.day)||0,time:((_period$close4=period.close)===null||_period$close4===void 0?void 0:_period$close4.time)||'2359'}};})}}),place.reviews&&{reviews:place.reviews.map(review=>({author:review.author_name,rating:review.rating,text:review.text,time:review.time}))}),((_place$geometry3=place.geometry)===null||_place$geometry3===void 0?void 0:_place$geometry3.viewport)&&{geometry:{viewport:{northeast:{lat:place.geometry.viewport.getNorthEast().lat(),lng:place.geometry.viewport.getNorthEast().lng()},southwest:{lat:place.geometry.viewport.getSouthWest().lat(),lng:place.geometry.viewport.getSouthWest().lng()}}}});return details;}getNewAPIPlaceTypes(type){switch(type){case'hospital':return['hospital'];case'pharmacy':return['pharmacy'];case'dentist':return['dentist'];case'veterinarian':return['veterinary_care'];case'doctor':return['doctor'];case'clinic':return['medical_lab','physiotherapist'];case'urgent_care':return['hospital','medical_lab'];case'physiotherapist':return['physiotherapist'];default:return['hospital','pharmacy','dentist','doctor','medical_lab','physiotherapist'];}}getGooglePlaceType(type){switch(type){case'hospital':return'hospital';case'pharmacy':return'pharmacy';case'dentist':return'dentist';case'veterinarian':return'veterinary_care';case'doctor':case'clinic':case'urgent_care':return'doctor';case'physiotherapist':return'physiotherapist';default:return'health';}}determineProviderType(types){if(types.includes('hospital'))return'hospital';if(types.includes('pharmacy'))return'pharmacy';if(types.includes('dentist'))return'dentist';if(types.includes('veterinary_care'))return'veterinarian';if(types.includes('physiotherapist'))return'physiotherapist';if(types.includes('doctor'))return'doctor';if(types.includes('health'))return'health';// Try to determine from name patterns\nconst name=types.join(' ').toLowerCase();if(name.includes('urgent')||name.includes('emergency'))return'urgent_care';if(name.includes('clinic'))return'clinic';return'health';}getSpecialtyQueries(specialty){const specialtyMap={'cardiology':['cardiologist','heart doctor','cardiac specialist'],'dermatology':['dermatologist','skin doctor'],'neurology':['neurologist','brain doctor'],'orthopedics':['orthopedist','bone doctor','sports medicine'],'psychiatry':['psychiatrist','mental health'],'pediatrics':['pediatrician','children doctor'],'gynecology':['gynecologist','womens health'],'ophthalmology':['eye doctor','ophthalmologist'],'urology':['urologist'],'oncology':['oncologist','cancer doctor'],'endocrinology':['endocrinologist','diabetes doctor'],'gastroenterology':['gastroenterologist','stomach doctor'],'nephrology':['nephrologist','kidney doctor'],'pulmonology':['pulmonologist','lung doctor'],'rheumatology':['rheumatologist','arthritis doctor'],'allergy':['allergist','allergy doctor'],'dialysis':['dialysis center','kidney dialysis','hemodialysis'],'sti':['sexual health clinic','std testing','reproductive health'],'covid':['covid testing','coronavirus testing','urgent care']};const lowerSpecialty=specialty.toLowerCase();return specialtyMap[lowerSpecialty]||[specialty];}calculateDistance(from,to){const R=3959;// Earth's radius in miles\nconst dLat=this.toRadians(to.lat-from.lat);const dLng=this.toRadians(to.lng-from.lng);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(this.toRadians(from.lat))*Math.cos(this.toRadians(to.lat))*Math.sin(dLng/2)*Math.sin(dLng/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}toRadians(degrees){return degrees*(Math.PI/180);}}_PlacesService=PlacesService;PlacesService.instance=void 0;export default PlacesService.getInstance();","map":{"version":3,"names":["GOOGLE_MAPS_CONFIG","PlacesService","constructor","isInitialized","getInstance","instance","initialize","_window$google","_window$google$maps","window","google","maps","places","loadGoogleMapsScript","error","console","Error","Promise","resolve","reject","_window$google2","_window$google2$maps","existingScript","document","querySelector","script","createElement","src","concat","API_KEY","async","defer","onload","onerror","head","appendChild","searchNearbyProviders","location","filters","arguments","length","undefined","type","radius","minRating","isOpen","keyword","center","LatLng","lat","lng","includedTypes","getNewAPIPlaceTypes","request","_objectSpread","fields","locationRestriction","circle","maxResultCount","textQuery","openNow","Place","searchNearby","providers","filter","place","rating","map","convertNewAPIToHealthcareProvider","provider","searchByText","query","locationBias","getPlaceDetails","placeId","id","requestedLanguage","fetchFields","details","convertNewAPIToPlaceDetails","findSpecialists","specialty","specialtyQueries","getSpecialtyQueries","allResults","results","address","push","warn","uniqueResults","index","self","findIndex","p","getPhotoUrl","photoReference","maxWidth","maxHeight","params","URLSearchParams","photoreference","key","maxwidth","toString","maxheight","userLocation","_place$location","_place$location2","_place$displayName","Date","now","Math","random","name","displayName","text","formattedAddress","determineProviderType","types","totalRatings","userRatingCount","priceLevel","businessStatus","distance","calculateDistance","convertToHealthcareProvider","_place$geometry","_place$geometry$locat","_place$geometry2","_place$geometry2$loca","geometry","place_id","vicinity","formatted_address","user_ratings_total","price_level","business_status","photos","slice","photo","photo_reference","baseProvider","phone","internationalPhoneNumber","website","websiteURI","regularOpeningHours","hours","periods","period","_period$open","_period$open2","_period$close","_period$close2","open","day","time","close","convertToPlaceDetails","_place$opening_hours$","_place$opening_hours","_place$geometry3","formatted_phone_number","utcOffset","utc_offset_minutes","opening_hours","call","_period$open3","_period$open4","_period$close3","_period$close4","reviews","review","author","author_name","viewport","northeast","getNorthEast","southwest","getSouthWest","getGooglePlaceType","includes","join","toLowerCase","specialtyMap","lowerSpecialty","from","to","R","dLat","toRadians","dLng","a","sin","cos","c","atan2","sqrt","degrees","PI","_PlacesService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/placesService.ts"],"sourcesContent":["import { GOOGLE_MAPS_CONFIG } from '../config/google';\nimport { Location } from './locationService';\n\nexport interface HealthcareProvider {\n  id: string;\n  name: string;\n  address: string;\n  location: Location;\n  type: ProviderType;\n  rating?: number;\n  totalRatings?: number;\n  priceLevel?: number;\n  phone?: string;\n  website?: string;\n  hours?: {\n    isOpen: boolean;\n    periods: Array<{\n      open: { day: number; time: string };\n      close: { day: number; time: string };\n    }>;\n  };\n  photos?: string[];\n  distance?: number;\n  placeId: string;\n  businessStatus?: 'OPERATIONAL' | 'CLOSED_TEMPORARILY' | 'CLOSED_PERMANENTLY';\n}\n\nexport type ProviderType = \n  | 'hospital' \n  | 'urgent_care' \n  | 'clinic' \n  | 'pharmacy' \n  | 'dentist' \n  | 'veterinarian'\n  | 'physiotherapist'\n  | 'doctor'\n  | 'health';\n\nexport interface SearchFilters {\n  type?: ProviderType | 'all';\n  radius?: number; // in meters\n  minRating?: number;\n  priceLevel?: number[];\n  isOpen?: boolean;\n  keyword?: string;\n}\n\nexport interface PlaceDetails extends HealthcareProvider {\n  reviews?: Array<{\n    author: string;\n    rating: number;\n    text: string;\n    time: number;\n  }>;\n  geometry?: {\n    viewport: {\n      northeast: { lat: number; lng: number };\n      southwest: { lat: number; lng: number };\n    };\n  };\n  utcOffset?: number;\n  services?: string[];\n  accessibility?: {\n    wheelchairAccessible?: boolean;\n  };\n}\n\nclass PlacesService {\n  private static instance: PlacesService;\n  private isInitialized = false;\n\n  private constructor() {}\n\n  public static getInstance(): PlacesService {\n    if (!PlacesService.instance) {\n      PlacesService.instance = new PlacesService();\n    }\n    return PlacesService.instance;\n  }\n\n  /**\n   * Initialize Google Places service\n   */\n  public async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      if (!window.google?.maps?.places) {\n        // Load Google Maps script directly\n        await this.loadGoogleMapsScript();\n      }\n      \n      this.isInitialized = true;\n    } catch (error) {\n      console.error('Failed to initialize Google Places:', error);\n      throw new Error('Google Places initialization failed');\n    }\n  }\n\n  private async loadGoogleMapsScript(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Check if script already exists\n      const existingScript = document.querySelector('script[src*=\"maps.googleapis.com\"]');\n      if (existingScript && window.google?.maps?.places) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_CONFIG.API_KEY}&libraries=places,geometry`;\n      script.async = true;\n      script.defer = true;\n\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Google Maps script'));\n\n      if (!existingScript) {\n        document.head.appendChild(script);\n      }\n    });\n  }\n\n  /**\n   * Search for healthcare providers near a location using new Places API\n   */\n  public async searchNearbyProviders(\n    location: Location,\n    filters: SearchFilters = {}\n  ): Promise<HealthcareProvider[]> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const {\n      type = 'all',\n      radius = 5000,\n      minRating = 0,\n      isOpen,\n      keyword\n    } = filters;\n\n    try {\n      // Use the new Places API (Place class)\n      const center = new google.maps.LatLng(location.lat, location.lng);\n      const includedTypes = this.getNewAPIPlaceTypes(type);\n      \n      const request = {\n        fields: [\n          'id',\n          'displayName',\n          'formattedAddress',\n          'location',\n          'rating',\n          'userRatingCount',\n          'priceLevel',\n          'businessStatus',\n          'types',\n          'regularOpeningHours'\n        ],\n        locationRestriction: {\n          circle: {\n            center: center,\n            radius: radius\n          }\n        },\n        includedTypes: includedTypes,\n        maxResultCount: 20,\n        ...(keyword && { textQuery: keyword }),\n        ...(isOpen && { openNow: true })\n      };\n\n      // Use searchNearby method from new Places API\n      const { places } = await google.maps.places.Place.searchNearby(request);\n      \n      const providers = places\n        .filter(place => !minRating || (place.rating && place.rating >= minRating))\n        .map(place => this.convertNewAPIToHealthcareProvider(place, location))\n        .filter(provider => provider.type !== 'health' || type === 'all');\n\n      return providers;\n    } catch (error) {\n      console.error('Places search failed:', error);\n      throw new Error(`Places search failed: ${error}`);\n    }\n  }\n\n  /**\n   * Search for healthcare providers by text query using new Places API\n   */\n  public async searchByText(\n    query: string,\n    location?: Location,\n    radius: number = 10000\n  ): Promise<HealthcareProvider[]> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    try {\n      const request = {\n        textQuery: query,\n        fields: [\n          'id',\n          'displayName', \n          'formattedAddress',\n          'location',\n          'rating',\n          'userRatingCount',\n          'priceLevel',\n          'businessStatus',\n          'types'\n        ],\n        maxResultCount: 20,\n        ...(location && {\n          locationBias: {\n            circle: {\n              center: new google.maps.LatLng(location.lat, location.lng),\n              radius: radius\n            }\n          }\n        })\n      };\n\n      const { places } = await google.maps.places.Place.searchByText(request);\n      \n      const providers = places.map(place => \n        this.convertNewAPIToHealthcareProvider(place, location)\n      );\n      \n      return providers;\n    } catch (error) {\n      console.error('Text search failed:', error);\n      throw new Error(`Text search failed: ${error}`);\n    }\n  }\n\n  /**\n   * Get detailed information about a specific place using new API\n   */\n  public async getPlaceDetails(placeId: string): Promise<PlaceDetails> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    try {\n      const place = new google.maps.places.Place({\n        id: placeId,\n        requestedLanguage: 'en'\n      });\n\n      await place.fetchFields({\n        fields: [\n          'id',\n          'displayName',\n          'formattedAddress',\n          'location',\n          'rating',\n          'userRatingCount',\n          'priceLevel',\n          'internationalPhoneNumber',\n          'websiteURI',\n          'regularOpeningHours',\n          'businessStatus',\n          'types'\n        ]\n      });\n\n      const details = this.convertNewAPIToPlaceDetails(place);\n      return details;\n    } catch (error) {\n      console.error('Place details failed:', error);\n      throw new Error(`Place details failed: ${error}`);\n    }\n  }\n\n  /**\n   * Find healthcare providers by specialty\n   */\n  public async findSpecialists(\n    specialty: string,\n    location: Location,\n    radius: number = 10000\n  ): Promise<HealthcareProvider[]> {\n    const specialtyQueries = this.getSpecialtyQueries(specialty);\n    const allResults: HealthcareProvider[] = [];\n\n    for (const query of specialtyQueries) {\n      try {\n        const results = await this.searchByText(\n          `${query} near ${location.address || `${location.lat},${location.lng}`}`,\n          location,\n          radius\n        );\n        allResults.push(...results);\n      } catch (error) {\n        console.warn(`Search failed for ${query}:`, error);\n      }\n    }\n\n    // Remove duplicates based on place ID\n    const uniqueResults = allResults.filter((provider, index, self) => \n      index === self.findIndex(p => p.placeId === provider.placeId)\n    );\n\n    return uniqueResults;\n  }\n\n  /**\n   * Get provider photos\n   */\n  public getPhotoUrl(\n    photoReference: string, \n    maxWidth: number = 400, \n    maxHeight?: number\n  ): string {\n    const params = new URLSearchParams({\n      photoreference: photoReference,\n      key: GOOGLE_MAPS_CONFIG.API_KEY,\n      maxwidth: maxWidth.toString(),\n      ...(maxHeight && { maxheight: maxHeight.toString() })\n    });\n\n    return `https://maps.googleapis.com/maps/api/place/photo?${params.toString()}`;\n  }\n\n  private convertNewAPIToHealthcareProvider(\n    place: google.maps.places.Place,\n    userLocation?: Location\n  ): HealthcareProvider {\n    const location: Location = {\n      lat: place.location?.lat() || 0,\n      lng: place.location?.lng() || 0\n    };\n\n    const provider: HealthcareProvider = {\n      id: place.id || `place_${Date.now()}_${Math.random()}`,\n      placeId: place.id || '',\n      name: place.displayName?.text || 'Unknown Provider',\n      address: place.formattedAddress || 'Address not available',\n      location,\n      type: this.determineProviderType(place.types || []),\n      rating: place.rating,\n      totalRatings: place.userRatingCount,\n      priceLevel: place.priceLevel,\n      businessStatus: place.businessStatus as any\n    };\n\n    // Calculate distance if user location is provided\n    if (userLocation) {\n      provider.distance = this.calculateDistance(userLocation, location);\n    }\n\n    return provider;\n  }\n\n  private convertToHealthcareProvider(\n    place: google.maps.places.PlaceResult,\n    userLocation?: Location\n  ): HealthcareProvider {\n    const location: Location = {\n      lat: place.geometry?.location?.lat() || 0,\n      lng: place.geometry?.location?.lng() || 0\n    };\n\n    const provider: HealthcareProvider = {\n      id: place.place_id || `place_${Date.now()}_${Math.random()}`,\n      placeId: place.place_id || '',\n      name: place.name || 'Unknown Provider',\n      address: place.vicinity || place.formatted_address || 'Address not available',\n      location,\n      type: this.determineProviderType(place.types || []),\n      rating: place.rating,\n      totalRatings: place.user_ratings_total,\n      priceLevel: place.price_level,\n      businessStatus: (place as any).business_status,\n      ...(place.photos && place.photos.length > 0 && {\n        photos: place.photos.slice(0, 5).map(photo => \n          this.getPhotoUrl((photo as any).photo_reference)\n        )\n      })\n    };\n\n    // Calculate distance if user location is provided\n    if (userLocation) {\n      provider.distance = this.calculateDistance(userLocation, location);\n    }\n\n    return provider;\n  }\n\n  private convertNewAPIToPlaceDetails(place: google.maps.places.Place): PlaceDetails {\n    const baseProvider = this.convertNewAPIToHealthcareProvider(place);\n    \n    const details: PlaceDetails = {\n      ...baseProvider,\n      phone: place.internationalPhoneNumber,\n      website: place.websiteURI,\n      ...(place.regularOpeningHours && {\n        hours: {\n          isOpen: place.regularOpeningHours.periods ? place.regularOpeningHours.periods.length > 0 : false,\n          periods: (place.regularOpeningHours.periods || []).map(period => ({\n            open: {\n              day: period.open?.day || 0,\n              time: period.open?.time || '0000'\n            },\n            close: {\n              day: period.close?.day || 0,\n              time: period.close?.time || '2359'\n            }\n          }))\n        }\n      })\n    };\n\n    return details;\n  }\n\n  private convertToPlaceDetails(place: google.maps.places.PlaceResult): PlaceDetails {\n    const baseProvider = this.convertToHealthcareProvider(place);\n    \n    const details: PlaceDetails = {\n      ...baseProvider,\n      phone: place.formatted_phone_number,\n      website: place.website,\n      utcOffset: place.utc_offset_minutes,\n      ...(place.opening_hours && {\n        hours: {\n          isOpen: place.opening_hours.isOpen?.() || false,\n          periods: (place.opening_hours.periods || []).map(period => ({\n            open: {\n              day: period.open?.day || 0,\n              time: period.open?.time || '0000'\n            },\n            close: {\n              day: period.close?.day || 0,\n              time: period.close?.time || '2359'\n            }\n          }))\n        }\n      }),\n      ...(place.reviews && {\n        reviews: place.reviews.map(review => ({\n          author: review.author_name,\n          rating: review.rating,\n          text: review.text,\n          time: review.time\n        }))\n      }),\n      ...(place.geometry?.viewport && {\n        geometry: {\n          viewport: {\n            northeast: {\n              lat: place.geometry.viewport.getNorthEast().lat(),\n              lng: place.geometry.viewport.getNorthEast().lng()\n            },\n            southwest: {\n              lat: place.geometry.viewport.getSouthWest().lat(),\n              lng: place.geometry.viewport.getSouthWest().lng()\n            }\n          }\n        }\n      })\n    };\n\n    return details;\n  }\n\n  private getNewAPIPlaceTypes(type: ProviderType | 'all'): string[] {\n    switch (type) {\n      case 'hospital':\n        return ['hospital'];\n      case 'pharmacy':\n        return ['pharmacy'];\n      case 'dentist':\n        return ['dentist'];\n      case 'veterinarian':\n        return ['veterinary_care'];\n      case 'doctor':\n        return ['doctor'];\n      case 'clinic':\n        return ['medical_lab', 'physiotherapist'];\n      case 'urgent_care':\n        return ['hospital', 'medical_lab'];\n      case 'physiotherapist':\n        return ['physiotherapist'];\n      default:\n        return ['hospital', 'pharmacy', 'dentist', 'doctor', 'medical_lab', 'physiotherapist'];\n    }\n  }\n\n  private getGooglePlaceType(type: ProviderType | 'all'): string {\n    switch (type) {\n      case 'hospital':\n        return 'hospital';\n      case 'pharmacy':\n        return 'pharmacy';\n      case 'dentist':\n        return 'dentist';\n      case 'veterinarian':\n        return 'veterinary_care';\n      case 'doctor':\n      case 'clinic':\n      case 'urgent_care':\n        return 'doctor';\n      case 'physiotherapist':\n        return 'physiotherapist';\n      default:\n        return 'health';\n    }\n  }\n\n  private determineProviderType(types: string[]): ProviderType {\n    if (types.includes('hospital')) return 'hospital';\n    if (types.includes('pharmacy')) return 'pharmacy';\n    if (types.includes('dentist')) return 'dentist';\n    if (types.includes('veterinary_care')) return 'veterinarian';\n    if (types.includes('physiotherapist')) return 'physiotherapist';\n    if (types.includes('doctor')) return 'doctor';\n    if (types.includes('health')) return 'health';\n    \n    // Try to determine from name patterns\n    const name = types.join(' ').toLowerCase();\n    if (name.includes('urgent') || name.includes('emergency')) return 'urgent_care';\n    if (name.includes('clinic')) return 'clinic';\n    \n    return 'health';\n  }\n\n  private getSpecialtyQueries(specialty: string): string[] {\n    const specialtyMap: Record<string, string[]> = {\n      'cardiology': ['cardiologist', 'heart doctor', 'cardiac specialist'],\n      'dermatology': ['dermatologist', 'skin doctor'],\n      'neurology': ['neurologist', 'brain doctor'],\n      'orthopedics': ['orthopedist', 'bone doctor', 'sports medicine'],\n      'psychiatry': ['psychiatrist', 'mental health'],\n      'pediatrics': ['pediatrician', 'children doctor'],\n      'gynecology': ['gynecologist', 'womens health'],\n      'ophthalmology': ['eye doctor', 'ophthalmologist'],\n      'urology': ['urologist'],\n      'oncology': ['oncologist', 'cancer doctor'],\n      'endocrinology': ['endocrinologist', 'diabetes doctor'],\n      'gastroenterology': ['gastroenterologist', 'stomach doctor'],\n      'nephrology': ['nephrologist', 'kidney doctor'],\n      'pulmonology': ['pulmonologist', 'lung doctor'],\n      'rheumatology': ['rheumatologist', 'arthritis doctor'],\n      'allergy': ['allergist', 'allergy doctor'],\n      'dialysis': ['dialysis center', 'kidney dialysis', 'hemodialysis'],\n      'sti': ['sexual health clinic', 'std testing', 'reproductive health'],\n      'covid': ['covid testing', 'coronavirus testing', 'urgent care']\n    };\n\n    const lowerSpecialty = specialty.toLowerCase();\n    return specialtyMap[lowerSpecialty] || [specialty];\n  }\n\n  private calculateDistance(from: Location, to: Location): number {\n    const R = 3959; // Earth's radius in miles\n    const dLat = this.toRadians(to.lat - from.lat);\n    const dLng = this.toRadians(to.lng - from.lng);\n    \n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(from.lat)) * Math.cos(this.toRadians(to.lat)) *\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}\n\nexport default PlacesService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}