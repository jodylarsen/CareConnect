{"ast":null,"code":"import _objectSpread from\"/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";var _LocationService;import{GOOGLE_MAPS_CONFIG}from'../config/google';class LocationService{constructor(){this.geocoder=null;this.watchId=null;}static getInstance(){if(!LocationService.instance){LocationService.instance=new LocationService();}return LocationService.instance;}/**\n   * Initialize Google Maps services\n   */async initialize(){try{var _window$google;if(!((_window$google=window.google)!==null&&_window$google!==void 0&&_window$google.maps)){const{Loader}=await import('@googlemaps/js-api-loader');const loader=new Loader({apiKey:GOOGLE_MAPS_CONFIG.API_KEY,version:GOOGLE_MAPS_CONFIG.VERSION,libraries:['places','geometry']});await loader.load();}this.geocoder=new google.maps.Geocoder();}catch(error){console.error('Failed to initialize Google Maps:',error);throw new Error('Google Maps initialization failed');}}/**\n   * Get current user location using browser geolocation\n   */async getCurrentLocation(options){return new Promise((resolve,reject)=>{if(!navigator.geolocation){reject({code:-1,message:'Geolocation is not supported by this browser',type:'UNKNOWN'});return;}const defaultOptions=_objectSpread({enableHighAccuracy:true,timeout:10000,maximumAge:300000},options);navigator.geolocation.getCurrentPosition(async position=>{const location={lat:position.coords.latitude,lng:position.coords.longitude};try{// Enhance with reverse geocoding\nconst enhancedLocation=await this.reverseGeocode(location);resolve(enhancedLocation);}catch(_unused){// Return basic location if reverse geocoding fails\nresolve(location);}},error=>{const locationError={code:error.code,message:this.getGeolocationErrorMessage(error.code),type:this.getGeolocationErrorType(error.code)};reject(locationError);},defaultOptions);});}/**\n   * Watch user location for continuous updates\n   */watchLocation(callback,errorCallback,options){if(!navigator.geolocation){const error={code:-1,message:'Geolocation is not supported by this browser',type:'UNKNOWN'};errorCallback===null||errorCallback===void 0?void 0:errorCallback(error);return-1;}const defaultOptions=_objectSpread({enableHighAccuracy:true,timeout:10000,maximumAge:60000},options);this.watchId=navigator.geolocation.watchPosition(async position=>{const location={lat:position.coords.latitude,lng:position.coords.longitude};try{const enhancedLocation=await this.reverseGeocode(location);callback(enhancedLocation);}catch(_unused2){callback(location);}},error=>{const locationError={code:error.code,message:this.getGeolocationErrorMessage(error.code),type:this.getGeolocationErrorType(error.code)};errorCallback===null||errorCallback===void 0?void 0:errorCallback(locationError);},defaultOptions);return this.watchId;}/**\n   * Stop watching location\n   */stopWatchingLocation(){if(this.watchId!==null){navigator.geolocation.clearWatch(this.watchId);this.watchId=null;}}/**\n   * Reverse geocode coordinates to address\n   */async reverseGeocode(location){if(!this.geocoder){await this.initialize();}return new Promise((resolve,reject)=>{if(!this.geocoder){reject(new Error('Geocoder not initialized'));return;}const latLng=new google.maps.LatLng(location.lat,location.lng);this.geocoder.geocode({location:latLng},(results,status)=>{if(status==='OK'&&results&&results[0]){const result=results[0];const enhancedLocation=_objectSpread(_objectSpread({},location),{},{address:result.formatted_address});// Extract address components\nresult.address_components.forEach(component=>{const types=component.types;if(types.includes('locality')){enhancedLocation.city=component.long_name;}else if(types.includes('administrative_area_level_1')){enhancedLocation.state=component.short_name;}else if(types.includes('country')){enhancedLocation.country=component.short_name;}else if(types.includes('postal_code')){enhancedLocation.zipCode=component.long_name;}});resolve(enhancedLocation);}else{reject(new Error(\"Reverse geocoding failed: \".concat(status)));}});});}/**\n   * Forward geocode address to coordinates\n   */async forwardGeocode(address){if(!this.geocoder){await this.initialize();}return new Promise((resolve,reject)=>{if(!this.geocoder){reject(new Error('Geocoder not initialized'));return;}this.geocoder.geocode({address},(results,status)=>{if(status==='OK'&&results){const locations=results.map(result=>{const location={lat:result.geometry.location.lat(),lng:result.geometry.location.lng(),address:result.formatted_address};// Extract address components\nresult.address_components.forEach(component=>{const types=component.types;if(types.includes('locality')){location.city=component.long_name;}else if(types.includes('administrative_area_level_1')){location.state=component.short_name;}else if(types.includes('country')){location.country=component.short_name;}else if(types.includes('postal_code')){location.zipCode=component.long_name;}});return location;});resolve(locations);}else{reject(new Error(\"Forward geocoding failed: \".concat(status)));}});});}/**\n   * Calculate distance between two locations\n   */calculateDistance(from,to){let unit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'miles';const R=unit==='miles'?3959:6371;// Earth's radius\nconst dLat=this.toRadians(to.lat-from.lat);const dLng=this.toRadians(to.lng-from.lng);const a=Math.sin(dLat/2)*Math.sin(dLat/2)+Math.cos(this.toRadians(from.lat))*Math.cos(this.toRadians(to.lat))*Math.sin(dLng/2)*Math.sin(dLng/2);const c=2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a));return R*c;}/**\n   * Get location from IP address (fallback method)\n   */async getLocationFromIP(){try{const response=await fetch('http://ipapi.co/json/');const data=await response.json();if(data.latitude&&data.longitude){return{lat:data.latitude,lng:data.longitude,city:data.city,state:data.region_code,country:data.country_code,zipCode:data.postal};}throw new Error('Invalid IP geolocation response');}catch(error){console.error('IP geolocation failed:',error);throw new Error('Failed to get location from IP');}}/**\n   * Check if location permissions are granted\n   */async checkLocationPermission(){if(!navigator.permissions){return'prompt';// Assume prompt if Permissions API not available\n}try{const permission=await navigator.permissions.query({name:'geolocation'});return permission.state;}catch(_unused3){return'prompt';}}toRadians(degrees){return degrees*(Math.PI/180);}getGeolocationErrorMessage(code){switch(code){case 1:return'Location access denied by user';case 2:return'Location information unavailable';case 3:return'Location request timed out';default:return'Unknown location error';}}getGeolocationErrorType(code){switch(code){case 1:return'PERMISSION_DENIED';case 2:return'POSITION_UNAVAILABLE';case 3:return'TIMEOUT';default:return'UNKNOWN';}}}_LocationService=LocationService;LocationService.instance=void 0;export default LocationService.getInstance();","map":{"version":3,"names":["GOOGLE_MAPS_CONFIG","LocationService","constructor","geocoder","watchId","getInstance","instance","initialize","_window$google","window","google","maps","Loader","loader","apiKey","API_KEY","version","VERSION","libraries","load","Geocoder","error","console","Error","getCurrentLocation","options","Promise","resolve","reject","navigator","geolocation","code","message","type","defaultOptions","_objectSpread","enableHighAccuracy","timeout","maximumAge","getCurrentPosition","position","location","lat","coords","latitude","lng","longitude","enhancedLocation","reverseGeocode","_unused","locationError","getGeolocationErrorMessage","getGeolocationErrorType","watchLocation","callback","errorCallback","watchPosition","_unused2","stopWatchingLocation","clearWatch","latLng","LatLng","geocode","results","status","result","address","formatted_address","address_components","forEach","component","types","includes","city","long_name","state","short_name","country","zipCode","concat","forwardGeocode","locations","map","geometry","calculateDistance","from","to","unit","arguments","length","undefined","R","dLat","toRadians","dLng","a","Math","sin","cos","c","atan2","sqrt","getLocationFromIP","response","fetch","data","json","region_code","country_code","postal","checkLocationPermission","permissions","permission","query","name","_unused3","degrees","PI","_LocationService"],"sources":["/Users/hz317604/Library/CloudStorage/OneDrive-TheHertzCorporation/Documents/Repos/CareConnect/frontend/src/services/locationService.ts"],"sourcesContent":["import { GOOGLE_MAPS_CONFIG } from '../config/google';\n\nexport interface Location {\n  lat: number;\n  lng: number;\n  address?: string;\n  city?: string;\n  state?: string;\n  country?: string;\n  zipCode?: string;\n}\n\nexport interface LocationError {\n  code: number;\n  message: string;\n  type: 'PERMISSION_DENIED' | 'POSITION_UNAVAILABLE' | 'TIMEOUT' | 'UNKNOWN';\n}\n\nclass LocationService {\n  private static instance: LocationService;\n  private geocoder: google.maps.Geocoder | null = null;\n  private watchId: number | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): LocationService {\n    if (!LocationService.instance) {\n      LocationService.instance = new LocationService();\n    }\n    return LocationService.instance;\n  }\n\n  /**\n   * Initialize Google Maps services\n   */\n  public async initialize(): Promise<void> {\n    try {\n      if (!window.google?.maps) {\n        const { Loader } = await import('@googlemaps/js-api-loader');\n        const loader = new Loader({\n          apiKey: GOOGLE_MAPS_CONFIG.API_KEY,\n          version: GOOGLE_MAPS_CONFIG.VERSION,\n          libraries: ['places', 'geometry']\n        });\n        \n        await loader.load();\n      }\n      \n      this.geocoder = new google.maps.Geocoder();\n    } catch (error) {\n      console.error('Failed to initialize Google Maps:', error);\n      throw new Error('Google Maps initialization failed');\n    }\n  }\n\n  /**\n   * Get current user location using browser geolocation\n   */\n  public async getCurrentLocation(options?: PositionOptions): Promise<Location> {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject({\n          code: -1,\n          message: 'Geolocation is not supported by this browser',\n          type: 'UNKNOWN'\n        } as LocationError);\n        return;\n      }\n\n      const defaultOptions: PositionOptions = {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000, // 5 minutes\n        ...options\n      };\n\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const location: Location = {\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          };\n\n          try {\n            // Enhance with reverse geocoding\n            const enhancedLocation = await this.reverseGeocode(location);\n            resolve(enhancedLocation);\n          } catch {\n            // Return basic location if reverse geocoding fails\n            resolve(location);\n          }\n        },\n        (error) => {\n          const locationError: LocationError = {\n            code: error.code,\n            message: this.getGeolocationErrorMessage(error.code),\n            type: this.getGeolocationErrorType(error.code)\n          };\n          reject(locationError);\n        },\n        defaultOptions\n      );\n    });\n  }\n\n  /**\n   * Watch user location for continuous updates\n   */\n  public watchLocation(\n    callback: (location: Location) => void,\n    errorCallback?: (error: LocationError) => void,\n    options?: PositionOptions\n  ): number {\n    if (!navigator.geolocation) {\n      const error: LocationError = {\n        code: -1,\n        message: 'Geolocation is not supported by this browser',\n        type: 'UNKNOWN'\n      };\n      errorCallback?.(error);\n      return -1;\n    }\n\n    const defaultOptions: PositionOptions = {\n      enableHighAccuracy: true,\n      timeout: 10000,\n      maximumAge: 60000, // 1 minute for watch\n      ...options\n    };\n\n    this.watchId = navigator.geolocation.watchPosition(\n      async (position) => {\n        const location: Location = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n\n        try {\n          const enhancedLocation = await this.reverseGeocode(location);\n          callback(enhancedLocation);\n        } catch {\n          callback(location);\n        }\n      },\n      (error) => {\n        const locationError: LocationError = {\n          code: error.code,\n          message: this.getGeolocationErrorMessage(error.code),\n          type: this.getGeolocationErrorType(error.code)\n        };\n        errorCallback?.(locationError);\n      },\n      defaultOptions\n    );\n\n    return this.watchId;\n  }\n\n  /**\n   * Stop watching location\n   */\n  public stopWatchingLocation(): void {\n    if (this.watchId !== null) {\n      navigator.geolocation.clearWatch(this.watchId);\n      this.watchId = null;\n    }\n  }\n\n  /**\n   * Reverse geocode coordinates to address\n   */\n  public async reverseGeocode(location: Location): Promise<Location> {\n    if (!this.geocoder) {\n      await this.initialize();\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.geocoder) {\n        reject(new Error('Geocoder not initialized'));\n        return;\n      }\n\n      const latLng = new google.maps.LatLng(location.lat, location.lng);\n\n      this.geocoder.geocode({ location: latLng }, (results, status) => {\n        if (status === 'OK' && results && results[0]) {\n          const result = results[0];\n          const enhancedLocation: Location = {\n            ...location,\n            address: result.formatted_address\n          };\n\n          // Extract address components\n          result.address_components.forEach(component => {\n            const types = component.types;\n            \n            if (types.includes('locality')) {\n              enhancedLocation.city = component.long_name;\n            } else if (types.includes('administrative_area_level_1')) {\n              enhancedLocation.state = component.short_name;\n            } else if (types.includes('country')) {\n              enhancedLocation.country = component.short_name;\n            } else if (types.includes('postal_code')) {\n              enhancedLocation.zipCode = component.long_name;\n            }\n          });\n\n          resolve(enhancedLocation);\n        } else {\n          reject(new Error(`Reverse geocoding failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Forward geocode address to coordinates\n   */\n  public async forwardGeocode(address: string): Promise<Location[]> {\n    if (!this.geocoder) {\n      await this.initialize();\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!this.geocoder) {\n        reject(new Error('Geocoder not initialized'));\n        return;\n      }\n\n      this.geocoder.geocode({ address }, (results, status) => {\n        if (status === 'OK' && results) {\n          const locations: Location[] = results.map(result => {\n            const location: Location = {\n              lat: result.geometry.location.lat(),\n              lng: result.geometry.location.lng(),\n              address: result.formatted_address\n            };\n\n            // Extract address components\n            result.address_components.forEach(component => {\n              const types = component.types;\n              \n              if (types.includes('locality')) {\n                location.city = component.long_name;\n              } else if (types.includes('administrative_area_level_1')) {\n                location.state = component.short_name;\n              } else if (types.includes('country')) {\n                location.country = component.short_name;\n              } else if (types.includes('postal_code')) {\n                location.zipCode = component.long_name;\n              }\n            });\n\n            return location;\n          });\n\n          resolve(locations);\n        } else {\n          reject(new Error(`Forward geocoding failed: ${status}`));\n        }\n      });\n    });\n  }\n\n  /**\n   * Calculate distance between two locations\n   */\n  public calculateDistance(from: Location, to: Location, unit: 'miles' | 'kilometers' = 'miles'): number {\n    const R = unit === 'miles' ? 3959 : 6371; // Earth's radius\n    const dLat = this.toRadians(to.lat - from.lat);\n    const dLng = this.toRadians(to.lng - from.lng);\n    \n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(from.lat)) * Math.cos(this.toRadians(to.lat)) *\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    \n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Get location from IP address (fallback method)\n   */\n  public async getLocationFromIP(): Promise<Location> {\n    try {\n      const response = await fetch('http://ipapi.co/json/');\n      const data = await response.json();\n      \n      if (data.latitude && data.longitude) {\n        return {\n          lat: data.latitude,\n          lng: data.longitude,\n          city: data.city,\n          state: data.region_code,\n          country: data.country_code,\n          zipCode: data.postal\n        };\n      }\n      \n      throw new Error('Invalid IP geolocation response');\n    } catch (error) {\n      console.error('IP geolocation failed:', error);\n      throw new Error('Failed to get location from IP');\n    }\n  }\n\n  /**\n   * Check if location permissions are granted\n   */\n  public async checkLocationPermission(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (!navigator.permissions) {\n      return 'prompt'; // Assume prompt if Permissions API not available\n    }\n\n    try {\n      const permission = await navigator.permissions.query({ name: 'geolocation' });\n      return permission.state;\n    } catch {\n      return 'prompt';\n    }\n  }\n\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n\n  private getGeolocationErrorMessage(code: number): string {\n    switch (code) {\n      case 1:\n        return 'Location access denied by user';\n      case 2:\n        return 'Location information unavailable';\n      case 3:\n        return 'Location request timed out';\n      default:\n        return 'Unknown location error';\n    }\n  }\n\n  private getGeolocationErrorType(code: number): LocationError['type'] {\n    switch (code) {\n      case 1:\n        return 'PERMISSION_DENIED';\n      case 2:\n        return 'POSITION_UNAVAILABLE';\n      case 3:\n        return 'TIMEOUT';\n      default:\n        return 'UNKNOWN';\n    }\n  }\n}\n\nexport default LocationService.getInstance();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}